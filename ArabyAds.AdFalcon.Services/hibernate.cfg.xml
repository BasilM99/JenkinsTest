<?xml version="1.0" encoding="utf-8" ?>
<hibernate-configuration xmlns="urn:nhibernate-configuration-2.2">
  <session-factory>
    <property name="connection.provider">
      NHibernate.Connection.DriverConnectionProvider
    </property>
    <property name="connection.driver_class">
      NHibernate.Driver.MySqlDataDriver
    </property>
    <!--<property name="connection.connection_string">
        server=127.0.0.1;User Id=root;Password=1234;database=performancetest;Persist Security Info=True;
      </property>-->
    <property name="connection.connection_string">

		server=127.0.0.1;User Id=root;Password=pass@word1;database=adfalcon;Persist Security Info=True;Charset=utf8
		<!--server=192.168.2.119;User Id=root;Password=hello@1;database=adfalcon;;Persist Security Info=True;Charset=utf8;default command timeout=120;-->
      <!--server=192.168.2.119;User Id=root;Password=hello@1;database=adfalcon;_2_1_0;Persist Security Info=True;Charset=utf8;default command timeout=120;-->
    </property>
    <property name="dialect">
      NHibernate.Dialect.MySQLDialect
    </property>
	<property name="format_sql">true</property>
    <property name="adonet.batch_size">
      10
    </property>
    <property name="show_sql">
      true
    </property>
    <property name="cache.use_second_level_cache">false</property>
    <property name="cache.use_query_cache">false</property>
    <property name="cache.provider_class">NHibernate.Caches.AppFabric.AppFabricProvider, NHibernate.Caches.AppFabric</property>
    <!--<property name="cache.provider_class">NHibernate.Caches.Velocity.VelocityProvider, NHibernate.Caches.Velocity</property>-->
    <!--<property name="cache.use_second_level_cache">true</property>
      <property name="cache.provider_class">
        NHibernate.Caches.Redis.RedisCacheProvider,
        NHibernate.Caches.Redis
      </property>-->
    <!--<property name="cache.use_second_level_cache">true</property>
      <property name="cache.use_query_cache">true</property>
      <property name="cache.provider_class">NHibernate.Caches.Velocity.VelocityProvider, NHibernate.Caches.Velocity</property>-->
    <!--<event type="post-collection-recreate">
        <listener class="ArabyAds.Framework.DomainServices.EventBroker.EventBrokerListener, ArabyAds.Framework.DomainServices" />
      </event>
      <event type="post-collection-update">
        <listener class="ArabyAds.Framework.DomainServices.EventBroker.EventBrokerListener, ArabyAds.Framework.DomainServices" />
      </event>
      <event type="post-collection-update">
        <listener class="ArabyAds.Framework.DomainServices.AuditTrial.AuditEventListener, ArabyAds.Framework.DomainServices" />
        <listener class="ArabyAds.Framework.DomainServices.EventBroker.EventBrokerListener, ArabyAds.Framework.DomainServices" />
      </event>-->
    <event type="post-update">
      <listener class="ArabyAds.Framework.DomainServices.AuditTrial.AuditEventListener, ArabyAds.Framework.DomainServices" />
      <listener class="ArabyAds.Framework.DomainServices.EventBroker.EventBrokerListener, ArabyAds.Framework.DomainServices" />
    </event>
    <event type="post-insert">
      <listener class="ArabyAds.Framework.DomainServices.AuditTrial.AuditEventListener, ArabyAds.Framework.DomainServices" />
      <listener class="ArabyAds.Framework.DomainServices.EventBroker.EventBrokerListener, ArabyAds.Framework.DomainServices" />
    </event>
    <event type="post-delete">
      <listener class="ArabyAds.Framework.DomainServices.AuditTrial.AuditEventListener, ArabyAds.Framework.DomainServices" />
      <listener class="ArabyAds.Framework.DomainServices.EventBroker.EventBrokerListener, ArabyAds.Framework.DomainServices" />
    </event>
    <event type="post-collection-recreate">
      <listener class="ArabyAds.Framework.DomainServices.AuditTrial.AuditEventListener, ArabyAds.Framework.DomainServices" />
      <listener class="ArabyAds.Framework.DomainServices.EventBroker.EventBrokerListener, ArabyAds.Framework.DomainServices" />
    </event>
    <event type="post-collection-remove">
      <listener class="ArabyAds.Framework.DomainServices.AuditTrial.AuditEventListener, ArabyAds.Framework.DomainServices" />
      <listener class="ArabyAds.Framework.DomainServices.EventBroker.EventBrokerListener, ArabyAds.Framework.DomainServices" />
    </event>
    <event type="post-collection-update">
      <listener class="ArabyAds.Framework.DomainServices.AuditTrial.AuditEventListener, ArabyAds.Framework.DomainServices" />
      <listener class="ArabyAds.Framework.DomainServices.EventBroker.EventBrokerListener, ArabyAds.Framework.DomainServices" />
    </event>
	  <event type="pre-insert">
		  <listener class="ArabyAds.AdFalcon.Persistence.Mappings.Tenant.TenantListener, ArabyAds.AdFalcon.Persistence" />

	  </event>
    <!--<event type="create">
        <listener class="ArabyAds.Framework.DomainServices.AuditTrial.AuditEventListener, ArabyAds.Framework.DomainServices" />
        <listener class="ArabyAds.Framework.DomainServices.EventBroker.EventBrokerListener, ArabyAds.Framework.DomainServices" />
      </event>-->
    <!--<event type="post-commit-delete">
        <listener class="ArabyAds.Framework.DomainServices.EventBroker.EventBrokerListener, ArabyAds.Framework.DomainServices" />
    
      </event>
      <event type="post-commit-insert">
        <listener class="ArabyAds.Framework.DomainServices.EventBroker.EventBrokerListener, ArabyAds.Framework.DomainServices" />
     
      </event>
      <event type="post-commit-update">
        <listener class="ArabyAds.Framework.DomainServices.EventBroker.EventBrokerListener, ArabyAds.Framework.DomainServices" />
     
      </event>-->
    <!--
        <event type="flush">
        <listener class="ArabyAds.Framework.DomainServices.AuditTrial.AuditEventListener, ArabyAds.Framework.DomainServices" />
        <listener class="ArabyAds.Framework.DomainServices.EventBroker.EventBrokerListener, ArabyAds.Framework.DomainServices" />
      </event>-->
    <!--<event type="post-update">
        <listener class="ArabyAds.Framework.DomainServices.AuditTrial.AuditEventListener, ArabyAds.Framework.DomainServices" />
      </event>
      <event type="post-insert">
        <listener class="ArabyAds.Framework.DomainServices.AuditTrial.AuditEventListener, ArabyAds.Framework.DomainServices" />
      </event>
      <event type="post-delete">
        <listener class="ArabyAds.Framework.DomainServices.AuditTrial.AuditEventListener, ArabyAds.Framework.DomainServices" />
      </event>

      <event type="pre-update">
        <listener class="ArabyAds.Framework.DomainServices.EventBroker.EventBrokerListener, ArabyAds.Framework.DomainServices" />
      </event>
      <event type="pre-insert">
        <listener class="ArabyAds.Framework.DomainServices.EventBroker.EventBrokerListener, ArabyAds.Framework.DomainServices" />
      </event>
      <event type="pre-delete">
        <listener class="ArabyAds.Framework.DomainServices.EventBroker.EventBrokerListener, ArabyAds.Framework.DomainServices" />
      </event>-->
  </session-factory>
</hibernate-configuration>
