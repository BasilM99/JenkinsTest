//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Noqoush.AdFalcon.Domain.Model.Core;

namespace Noqoush.AdFalcon.Domain.Model.Campaign
{
    public class TextCreative : AdCreative
    {
        public TextCreative()
        {
            TypeId = AdTypeIds.Text;
        }
        public virtual TileImage TileImage
        {
            get;
            set;
        }
        public override void Approve()
        {
            base.Approve();
            //TODO:Osaleh move this code to framework
            var ftpBaseDirectory = Configuration.FtpBaseDirectory;
            var cdnBaseUrl = Configuration.CdnBaseUrl;
            ftpUpload(ftpBaseDirectory, cdnBaseUrl);
            UploadSnapshots();
        }
        public virtual void ftpUpload(string baseDirectory, string cdnBaseUrl)
        {

            string temp = string.Empty;
            var subFolder = string.Empty;
            if (!string.IsNullOrWhiteSpace(Group.Campaign.FolderURL))
            {
                subFolder = Group.Campaign.FolderURL;
            }
            else
            {
                //we need to create folder for it
                subFolder = Framework.Utilities.Environment.GetServerTime().ToString("yyyyMMdd");
                temp = string.Format("{0}/{1}", baseDirectory, subFolder);
                //create folder fo the current date
                Framework.Utilities.FtpHelper.CreateDirectory(temp);
                //create folder for current Campaign
                var isFolderCreated = false;
                while (!isFolderCreated)
                {
                    temp = string.Format("{0}/{1}", baseDirectory, subFolder);
                    var r = RandomNumber(1, 100000);
                    temp = string.Format("{0}/{1}", temp, r);
                    if (!Framework.Utilities.FtpHelper.DirectoryExists(temp))
                    {
                        Framework.Utilities.FtpHelper.CreateDirectory(temp);
                        isFolderCreated = true;
                        subFolder += "/" + r;
                        Group.Campaign.FolderURL = subFolder;
                    }
                }
            }
            // create folder for current ad if not found
            subFolder = string.Format("{0}/{1}", subFolder, uId);
            temp = string.Format("{0}/{1}", baseDirectory, subFolder);
            Framework.Utilities.FtpHelper.CreateDirectory(temp);

            var directory = string.Format("{0}/{1}", baseDirectory, subFolder);
            var cdnUrl = string.Format("{0}/{1}", cdnBaseUrl, subFolder);
            TileImage.ftpUpload(directory, cdnUrl);

        }
        public virtual void AddTextCreatives(IList<CreativeUnit> adCreativeUnits, AdGroupTrackingEvent impressionEvent, string phoneImpressionTracker, string tabletImpressionTracker)
        {
            foreach (var creativeUnit in adCreativeUnits.Where(p => p.DeviceType.ID == (int)DeviceTypeEnum.SmartPhone))
            {
                if (!AdCreativeUnits.Any(x => x.CreativeUnit.ID == creativeUnit.ID))
                {
                    AdCreativeUnit adCreativeUnit = new AdCreativeUnit
                    {
                        CreativeUnit = creativeUnit,
                        Content = this.AdText,
                        UniqueId = Guid.NewGuid().ToString()
                    };

                    adCreativeUnit.SetTrackingEvent(impressionEvent, phoneImpressionTracker);

                    AddCreativeUnit(adCreativeUnit);
                }
            }

            foreach (var creativeUnit in adCreativeUnits.Where(p => p.DeviceType.ID == (int)DeviceTypeEnum.Tablet))
            {
                if (!AdCreativeUnits.Any(x => x.CreativeUnit.ID == creativeUnit.ID))
                {
                    AdCreativeUnit adCreativeUnit = new AdCreativeUnit
                    {
                        CreativeUnit = creativeUnit,
                        Content = this.AdText,
                        UniqueId = Guid.NewGuid().ToString(),
                    };

                    adCreativeUnit.SetTrackingEvent(impressionEvent, tabletImpressionTracker);
                    AddCreativeUnit(adCreativeUnit);
                }
            }
        }

        public override AdCreative Clone(AdGroup adGroup)
        {
            TextCreative cloneObj = base.Clone<TextCreative>();
            cloneObj.TileImage = this.TileImage.Copy();
            foreach (var adCreativeUnit in AdCreativeUnits)
            {
                var adCreativeUnitClone = adCreativeUnit.Copy(cloneObj);
                if (adCreativeUnitClone.Document != null)
                {
                    adCreativeUnitClone.Document.UpdateUsage();
                }
                if (adCreativeUnitClone.SnapshotDocument != null)
                {
                    adCreativeUnitClone.SnapshotDocument.UpdateUsage();
                }
                cloneObj.AddCreativeUnit(adCreativeUnitClone);
            }
            return cloneObj;
        }

        public override AdCreative Clone()
        {
            return Clone(this.Group);
        }


    }
}

