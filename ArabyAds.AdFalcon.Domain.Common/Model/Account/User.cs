//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Security.Cryptography;
using System.Text;
using Noqoush.AdFalcon.Domain.Model.Core;
using Noqoush.Framework.DomainServices;
using Noqoush.Framework;
using Noqoush.AdFalcon.Domain.Repositories.Core;
using System.Collections.Generic;
using Noqoush.AdFalcon.Domain.Repositories;
using System.Linq;
using Noqoush.Framework.UserInfo;

namespace Noqoush.AdFalcon.Domain.Model.Account
{
    public class User : IEntity<int>
    {
        private static ICountryVATRepository _CountryVATRepository = IoC.Instance.Resolve<ICountryVATRepository>();
        private static IUserAccountsRepository _userAccountsRepository = IoC.Instance.Resolve<IUserAccountsRepository>();

        public virtual bool IsDeleted { get; set; }
        public virtual string FirstName { get; set; }
        public virtual byte[] RegistredIP { get; set; }
        public virtual string EmailAddress { get; set; }
        public virtual IList<UserAccounts> UserAccounts { get; set; }
        public virtual string LastName { get; set; }

        public virtual string Phone { get; set; }

        public virtual string Company { get; set; }

        public virtual string Address1 { get; set; }

        public virtual string City { get; set; }

        public virtual string State { get; set; }

        public virtual string Postal { get; set; }

        public virtual bool IsAllowNotifications { get; set; }

        public virtual string Password { get; set; }

        public virtual Country Country { get; set; }

        public virtual Language Language { get; set; }
        public virtual bool Block { get; set; }
        public virtual string Address2 { get; set; }
        public virtual DateTime LastLoginDate { get; set; }
        public virtual string ActivationCode { get; set; }
        public virtual global::Noqoush.AdFalcon.Domain.Model.Account.Account LastAccountLogin
        {
            get
           ;
            set;
        }
        public virtual global::Noqoush.AdFalcon.Domain.Model.Account.Account Account
        {
            get
            {

                if (this.UserAccounts != null)
                {
                    if (this.UserAccounts.Count() == 1 )
                    {
                        return this.UserAccounts[0].Account;
                    }
                    else
                    {
                        if (LastAccountLogin != null)
                        {
                            var UserAccounts = this.UserAccounts.Where(x => x.Account.ID == LastAccountLogin.ID).FirstOrDefault();

                            return UserAccounts != null ? UserAccounts.Account : null;
                        }
                        else
                        {

                           

                           
                                var UserAccounts = this.UserAccounts.FirstOrDefault();


                                return UserAccounts != null ? UserAccounts.Account : null;

                           
                        }

                    }
                }

                return null;

            }
            set { }
        }

      
        public virtual UserType UserType
        {
            get;
            set;
        }
        public virtual UserStatus Status { get; set; }

        public virtual DateTime RegistrationDate { get; set; }

        public virtual string PendingEmailAddress { get; set; }

        public virtual void Activate()
        {
            ActivationCode = "1";

        }
        public virtual decimal GetVATValue()
        {

            if (this.Account.PrimaryUser != null && this.Account.PrimaryUser.Country != null)
                return _CountryVATRepository.GetVATValueByCountryID(this.Account.PrimaryUser.Country.ID);


            return 0;

        }


        public virtual void SetActivationCode()
        {
            ActivationCode = MD5Encryption(Guid.NewGuid().ToString());

        }

        public virtual void GeneratePassword()
        {
            Password = MD5Encryption(Guid.NewGuid().ToString());
            Password = Password + GenerateCouponSpecialChracter(1);
            Password = Password + GenerateCouponUPPER(1);
        }
        public virtual string GenerateCouponSpecialChracter(int length)
        {
            Random random = new Random();
            string characters = "!@#$%^&*";
            StringBuilder result = new StringBuilder(length);
            for (int i = 0; i < length; i++)
            {
                result.Append(characters[random.Next(characters.Length)]);
            }
            return result.ToString();
        }
        public virtual string GenerateCouponUPPER(int length)
        {
            Random random = new Random();
            string characters = "QWERTYUIOPLKJHGFDSAZXCVBNM";
            StringBuilder result = new StringBuilder(length);
            for (int i = 0; i < length; i++)
            {
                result.Append(characters[random.Next(characters.Length)]);
            }
            return result.ToString();
        }
        public virtual void ChangePassword(string password)
        {
            Password = MD5Encryption(password);
        }

        public virtual void BlockUser()
        {
            this.Block = true;
        }

        public virtual void UnBlockUser()
        {
            this.Block = false;
        }

        public virtual void AttachAccount(int accountId,UserType userType)
        {
            UserAccounts UserAccount = new UserAccounts();
            UserAccount.Account = new Account { ID = accountId };
            UserAccount.User = this;
            UserAccount.UserType = userType;
            if (this.UserAccounts != null && !this.UserAccounts.Any(M => M.Account.ID == accountId))
            {

                this.UserAccounts.Add(UserAccount);
            }
            else if (this.UserAccounts == null)
            {
                this.UserAccounts = new List<UserAccounts>();
                this.UserAccounts.Add(UserAccount);
            }
            // _userAccountsRepository.Save(UserAccount);
        }

        private string MD5Encryption(string originalText)
        {
            // MD5 enc = MD5.Create();
            // byte[] rescBytes = Encoding.ASCII.GetBytes(originalText);
            // byte[] hashBytes = enc.ComputeHash(rescBytes);

            // StringBuilder str = new StringBuilder();
            // for (int i = 0; i < hashBytes.Length; i++)
            // {
            //     str.Append(hashBytes[i].ToString("X2"));
            // }

            //return str.ToString();
            //Osaleh on 15-10-2011
            //this code changed cuz request from Sharhabel 
            byte[] bs = Encoding.UTF8.GetBytes(originalText);
            using (MD5 md5 = MD5.Create())
            {
                bs = md5.ComputeHash(bs);
            }
            return BitConverter.ToString(bs).Replace("-", "");
        }

        public virtual int ID { get; set; }
        public virtual string GetDescription()
        {
            return GetName();
        }
        public virtual string GetAccountName()
        {
            if (!string.IsNullOrWhiteSpace(Company))
            {
                return Company;
            }
            else
            {
                return this.GetName();
            }
        }
        public virtual string GetName()
        {
            return string.Format("{0} {1}", this.FirstName, this.LastName);
        }


        public virtual string GetString(byte[] bytes)
        {
            StringBuilder value = new StringBuilder();

            if (bytes != null)
            {

                for (int ctr = 0; ctr < bytes.Length; ctr++)
                {
                    value.Append(Convert.ToInt32(bytes[ctr]).ToString());

                    if (ctr != bytes.Length - 1) value.Append(".");

                }
            }
            return value.ToString();
        }
        public virtual string GetIPString(string bytesString)
        {
            StringBuilder value = new StringBuilder();
            if (!string.IsNullOrEmpty(bytesString))
            {
                byte[] bytes = Convert.FromBase64String(bytesString);
                if (bytes != null)
                {

                    for (int ctr = 0; ctr < bytes.Length; ctr++)
                    {
                        value.Append(Convert.ToInt32(bytes[ctr]).ToString());

                        if (ctr != bytes.Length - 1) value.Append(".");

                    }
                }
            }
            return value.ToString();
        }
        public virtual string AccountResetToken { get; set; }
        public virtual DateTime TokenCreationDate { get; set; }
    }
}

