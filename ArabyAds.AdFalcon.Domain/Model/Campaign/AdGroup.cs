//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using ArabyAds.AdFalcon.Domain.Model.Campaign.Targeting;
using ArabyAds.AdFalcon.Domain.Model.Campaign.Targeting.Device;
using ArabyAds.AdFalcon.Domain.Model.Core;
using ArabyAds.AdFalcon.Domain.Model.Core.CostElement;
using ArabyAds.AdFalcon.Exceptions;
using ArabyAds.AdFalcon.Exceptions.Campaign;
using ArabyAds.AdFalcon.Exceptions.Core;
using ArabyAds.Framework.DataAnnotations;
using System.Linq;
using ArabyAds.AdFalcon.Domain.Repositories.Campaign;
using ArabyAds.Framework;
using ArabyAds.AdFalcon.Domain.Repositories.Core;
using ArabyAds.AdFalcon.Domain.Model.Account.PMP;
using ArabyAds.AdFalcon.Domain.Repositories.Account;
using ArabyAds.Framework.UserInfo;
//using ArabyAds.Framework.DistributedEventBroker.PubSub.Publishing;
//using ArabyAds.Framework.DistributedEventBroker.PubSub.Entities;
using ArabyAds.Framework.Kafka;
using ArabyAds.AdFalcon.EventDTOs;
using ArabyAds.Framework.DomainServices.EventBroker;
using ArabyAds.Framework.DomainServices;
using ArabyAds.AdFalcon.Domain.Model.Account;
using ArabyAds.AdFalcon.Domain.Model.Campaign.Objective;
using ArabyAds.AdFalcon.Domain.Common.Model.Core.CostElement;
using ArabyAds.AdFalcon.Domain.Common.Model.Account;
using ArabyAds.AdFalcon.Domain.Common.Model.Core;
using ArabyAds.AdFalcon.Domain.Common.Model.Campaign;
using ArabyAds.AdFalcon.Domain.Common.Model.Campaign.Targeting;

namespace ArabyAds.AdFalcon.Domain.Model.Campaign
{
    //[DataContract(Name = "TargetingConnectionType")]
    //public enum TargetingConnectionType
    //{
    //    [EnumMember]
    //     [EnumText("Wifi", "Campaign")]
    //    WIFI = 1,
  
      
    //    [EnumMember]
    //    [EnumText("Cellular", "Campaign")]
    //    Cellular = 2,
        
     
    //}

    //[DataContract(Name = "BiddingStrategy")]
    //public enum BiddingStrategy
    //{
    //    [EnumMember]
    //    Unknown =0,
    //    [EnumMember]
    //    [EnumText("FixedType", "Lookup")]
    //    Fixed = 1,


    //    [EnumMember]
    //    [EnumText("Dynamic", "Global")]
    //    Dynamic = 2,


    //}

    //[DataContract(Name = "ConversionSetting")]
    //public enum ConversionSetting
    //{
    //    [EnumMember]
    //    Unknown = 0,
    //    [EnumMember]
    //    [EnumText("FixedType", "Lookup")]
    //    CountingFirst = 1,


    //    [EnumMember]
    //    [EnumText("Dynamic", "Global")]
    //    CountingEvery = 2,
    //    [EnumMember]
    //    [EnumText("Dynamic", "Global")]
    //    CountingAll = 3,

    //}

    //[DataContract(Name = "ConversionType")]
    //public enum ConversionType
    //{
    //    [EnumMember]
    //    Unknown = 0,
    //    [EnumMember]
    //    [EnumText("Click", "Global")]
    //    Click = 1,


    //    [EnumMember]
    //    [EnumText("ViewAndClick", "Commands")]
    //    ClickView = 2,


    //}
    //[DataContract()]
    //public enum AdPositionEnum
    //{  
    //    [EnumMember]
    //    Undefined = 0,
    //    [EnumMember]
    //    AboveTheFold = 1,
    //    [EnumMember]
    //    BelowTheFold = 2,

    //    [EnumMember]
    //    Unknown = 4,

    //}


    //[DataContract(Name = "CountingTypeAttribuation")]
    //public enum CountingTypeAttribuation
    //{
    //    [EnumMember]
    //    Unknown = 0,
    //    [EnumMember]
    //    [EnumText("Minutes", "Time" )]
    //    Minutes = 1,


    //    [EnumMember]
    //    [EnumText("Hours", "Time")]
    //    Hours = 2,
    //    [EnumMember]
    //    [EnumText("Days", "Time")]
    //    Days = 3,
    //    [EnumMember]
    //    [EnumText( "Months", "Time")]
    //    Months = 4,

    //}


    public class AdGroup : AdBase<AdGroup, AdGroupStatus>
    {
        private IAdGroupRepository adGroupRepository = IoC.Instance.Resolve<IAdGroupRepository>();
        private ICampaignRepository campaignRepository = IoC.Instance.Resolve<ICampaignRepository>();
        //  private ICostModelWrapperRepository costModelWrapperRepository = IoC.Instance.Resolve<ICostModelWrapperRepository>();
        private IAccountCostElementRepository accountCostElementRepository = IoC.Instance.Resolve<IAccountCostElementRepository>();

        private IAccountFeeRepository accountFeeRepository = IoC.Instance.Resolve<IAccountFeeRepository>();

        private IBusinessPartnerRepository BusinessPartnerRepository = IoC.Instance.Resolve<IBusinessPartnerRepository>();

        private IDPPartnerRepository DPPartnerRepository = IoC.Instance.Resolve<IDPPartnerRepository>();
        public virtual Campaign Campaign { get; set; }

        public virtual IList<AdCreative> Ads { get; set; }
        public virtual bool LogAdMarkup { get; set; }

        public virtual CountingTypeAttribuation CountingTypeAttribuation { get; set; }
        public virtual int? ViewabilityVendorId { get; set; }

        public virtual bool IgnoreDailyBudget { get; set; }
        public virtual decimal? DailyBudget { get; set; }
        public virtual decimal? Budget { get; set; }
        public virtual decimal Bid { get; set; }
        public virtual decimal MinimumUnitPrice { get; set; }
        public virtual decimal? CPMValue { get; set; }
        public virtual decimal? AudianceDiscountPrice { get; set; }
        public virtual string UniqueId { get; set; }
        private static IList<string> billingInfoPropTobeNotifyed = new List<string> { "Budget", "DailyBudget", "Pacing", "Bid" , "MinimumUnitPrice", "MaxDataBid", "DataBid" };
        public virtual decimal DiscountedBid
        {
            get { return Campaign.GetDiscountedBid(this); }
        }
        public virtual bool AllowOpenAuction { get; set; }
        public virtual CostModelWrapper CostModelWrapper { get;  set; }
        public virtual CostModelWrapperEnum CostModelWrapperEnum
        {
            get
            {
                if (this.CostModelWrapper != null)
                {
                    return (CostModelWrapperEnum)this.CostModelWrapper.ID;
                }

                return 0;
            }
        }
        public virtual TargetingConnectionType? ConnectionType {get;set;
        }
        public virtual AdGroupObjective Objective { get; set; }
        private string _NameLower;
        public virtual PacingPolicies Pacing { get; set; }
        public virtual string NameLower { get { return _NameLower; } set { _NameLower = !string.IsNullOrEmpty(Name) ? Name.Trim().ToLower() : ""; } }

        public virtual decimal? DataBid { get; set; }
        public virtual decimal? MaxDataBid
        {
            get; set;
        }


        public virtual BiddingStrategy BiddingStrategy { get; set; }


        public virtual HouseAd HouseAd { get; set; }
        public virtual bool DisableProxyTraffic { get; set; }
        public virtual bool IsWifi { get; set; }
        public virtual int? AdPosition { get; set; }
        public virtual bool IsCellular { get; set; }
        public virtual bool RunAllExchanges { get; set; }
        public virtual bool OnlyWIFI { get; set; }
        public virtual bool TrackInstalls { get; set; }
        public virtual bool OpenInExternalBrowser { get; set; }
        public virtual DateTime ModifiedOn { get; set; }
        public virtual IList<AdGroupTrackingEvent> TrackingEvents { get; set; }

        public virtual IList<AdGroupConversionEvent> ConversionEvents { get; set; }
        public virtual IList<AdGroupEvent> AdGroupEvents { get; set; }
        public virtual bool IsDefaultPrerequisitesSaved { get; set; }
        public virtual IList<AdGroupCostElement> CostElements { get; set; }

        public virtual AdGroupDynamicBiddingConfig AdGroupDynamicBiddingConfig { get; set; }
        public virtual IList<AdGroupDynamicBiddingConfig> AdGroupDynamicBiddingConfigs { get {
                if (AdGroupDynamicBiddingConfig != null)
                {
                    return new List<AdGroupDynamicBiddingConfig>() { AdGroupDynamicBiddingConfig };
                }
                else
                    return new List<AdGroupDynamicBiddingConfig>();

            } set {


            } }

        public virtual IList<AdGroupFee> Fees { get; set; }
        public override AdGroupStatus Status
        {
            get
            {
                AdGroupStatus returnStatus = null;
                var ads = GetAds();
                var localAds = ads.Select(x => x.Status).ToList();
                //if no ad then the status is empty
                if ((localAds == null) || localAds.Count == 0)
                {
                    returnStatus = AdGroupStatus.Empty;
                    return returnStatus;
                }
                //get not Submitted count
                var noneSubmittedCount = localAds.Count(item => item.ID == AdCreativeStatus.Submitted.ID);
                //if count is zero then the ad group is empty
                if (noneSubmittedCount == localAds.Count)
                {
                    returnStatus = AdGroupStatus.Empty;
                    return returnStatus;
                }


                //get all Completed/Expired status count
                var completedCount =
                    localAds.Count(
                        item => (item.ID == AdCreativeStatus.Completed.ID || item.ID == AdCreativeStatus.Expired.ID));
                //if Completed/Expired Count is Ads Count then the ad group is Completed
                if (completedCount == localAds.Count)
                {
                    returnStatus = AdGroupStatus.Completed;
                    return returnStatus;
                }


                //get all Active status count
                var activeCount = localAds.Count(item => (item.ID == AdCreativeStatus.Active.ID || item.ID == AdCreativeStatus.ActiveAdServer.ID));
                //if Active count is Ads Count then the ad group is Running
                if (activeCount == localAds.Count)
                {
                    returnStatus = AdGroupStatus.Running;
                    return returnStatus;
                }



                //check some ads are active then status is "Running With Attention Action Needed"
                if ((activeCount != 0))
                {
                    returnStatus = AdGroupStatus.RunningWithAttentionActionNeeded;
                    return returnStatus;
                }
                returnStatus = AdGroupStatus.AttentionActionNeeded;
                return returnStatus;
            }
        }
        public virtual bool IsAllAdsPaused
        {
            get
            {
                var ads = GetAds();
                var localAds = ads.Select(x => x.Status).ToList();
                //if no ad then the not all ads are paused
                if ((localAds == null) || localAds.Count == 0)
                {
                    return false;
                }
                //get not paused count
                var nonePausedCount = localAds.Count(item => item.ID != AdCreativeStatus.Paused.ID);
                //if count is zero then all ads are paused
                if (nonePausedCount == 0)
                {
                    return true;
                }
                return false;
            }
        }
        public virtual bool IsCostModelChanged { get; set; }

        public virtual ConversionSetting ConversionSetting { get; set; }
        public virtual ConversionType ConversionType { get; set; }
        public virtual int ViewAttribuation { get; set; }
        public virtual int ClickAttribuation { get; set; }
        public virtual int CountingAttribuation { get; set; }
        public virtual void SetAdsDataBid()
        {
            //foreach (AdCreative item in Ads)
            //{
            //    item.DataBid = AudianceDiscountPrice;
            //}

        }
        public virtual IList<TargetingBase> Targetings
        {
            get;
            set;
        }
        public virtual IList<AdGroupBidConfig> CampaignBidConfigs { get; set; }

        public virtual IList<AdGroupInventorySource> AdGroupInventorySources { get; set; }


        public virtual IList<AdGroupBidModifier> AdGroupBidModifiers { get; set; }


        public virtual bool IsValid
        {
            get;
            set;
        }
        public virtual void Validate(int accountId)
        {
            IsValid = false;
            if ((this.Campaign.Account != null) && (this.Campaign.Account.ID != accountId))
            {
                throw new AccountNotValidException();
            }
            if (this.IsDeleted)
            {

                throw new DataNotFoundException();
            }
            IsValid = DataAnnotationsValidator.TryValidate(this);
            IsValid = true;
        }

        #region Cost Elements

        public virtual bool SetAccountCostElmentsSaved(int accountId, int DPPartner = 0)
        {
            var elemtnts = GetCurrentCostElements();
            var costElements = accountCostElementRepository.GetAccountCostElements(accountId).Where(M=>M.DataProvider==null);

            if (costElements != null)
            {
                foreach (var costElm in costElements)
                {
                    AdGroupCostElement adroupCostElment = new AdGroupCostElement();


                    adroupCostElment.CostElement = costElm.CostElement;
                    adroupCostElment.FromDate = Framework.Utilities.Environment.GetServerTime();
                    adroupCostElment.Scope =(AdGroupCostElementScope) costElm.CostElement.Scope;
                    adroupCostElment.CostModelWrapper = this.CostModelWrapper;
                    if (costElm.Beneficiary != null)
                    {
                        adroupCostElment.Beneficiary = costElm.Beneficiary;
                    }
                    var costValue = costElm.CostElement.Values.Where(M => M.CostModelWrapper.ID == this.CostModelWrapper.ID).FirstOrDefault();
                    // CostModelWrapper CostModelWrapper
                    if (costValue != null)
                    {
                        adroupCostElment.SetValue(costValue.Value);
                        //  adroupCostElment.SetCostElementValue(costValue.Value, this.CostModelWrapper);
                    }
                    if (DPPartner > 0)
                    {

                        adroupCostElment.Provider = new Core.DPPartner { ID = DPPartner };
                        adroupCostElment.Scope = AdGroupCostElementScope.DataProvider;
                    }
                    adroupCostElment.AdGroup = this;
                    AddGroupCostElement(adroupCostElment, true);
                }
                var elemtntsAfter = GetCurrentCostElements();
                if (elemtntsAfter.Count != elemtnts.Count)
                {
                    return true;
                }
            }
            return false;

        }

        public virtual bool SetAccountCostElmentsSavedForDataProv(int accountId, int DPPartner = 0)
        {
            var elemtnts = GetCurrentCostElements();
            var costElements = accountCostElementRepository.GetAccountCostElements(accountId).Where(M => M.DataProvider != null);

            if (costElements != null)
            {
                foreach (var costElm in costElements)
                {
                    AdGroupCostElement adroupCostElment = new AdGroupCostElement();


                    adroupCostElment.CostElement = costElm.CostElement;
                    adroupCostElment.FromDate = Framework.Utilities.Environment.GetServerTime();
                    adroupCostElment.Scope = (AdGroupCostElementScope)costElm.CostElement.Scope;
                    adroupCostElment.CostModelWrapper = this.CostModelWrapper;
                 
                    var costValue = costElm.CostElement.Values.Where(M => M.CostModelWrapper.ID == this.CostModelWrapper.ID).FirstOrDefault();
                    // CostModelWrapper CostModelWrapper
                    if (costValue != null)
                    {
                        adroupCostElment.SetValue(costValue.Value);
                        //  adroupCostElment.SetCostElementValue(costValue.Value, this.CostModelWrapper);
                    }
                    if (DPPartner > 0)
                    {

                        adroupCostElment.Provider = new Core.DPPartner { ID = DPPartner };
                        adroupCostElment.Scope = AdGroupCostElementScope.DataProvider;
                    }
                    if (costElm.Beneficiary != null)
                    {
                        adroupCostElment.Beneficiary = costElm.Beneficiary;
                    }
                    else
                    {
                        adroupCostElment.Beneficiary = new Party { ID = accountId };

                    }

                    adroupCostElment.AdGroup = this;
                    AddGroupCostElement(adroupCostElment, true);
                }
                var elemtntsAfter = GetCurrentCostElements();
                if (elemtntsAfter.Count != elemtnts.Count)
                {
                    return true;
                }
            }
            return false;

        }


        public virtual IList<AdGroupCostElement> GetCurrentCostElements()
        {
            return CostElements.Where(x => x.ToDate > Framework.Utilities.Environment.GetServerTime() || x.ToDate == null).ToList();
        }
        public virtual void RemoveGroupCostElement(AdGroupCostElement costElement)
        {
            //find the element
            var item = CostElements.FirstOrDefault(x => x.ID == costElement.ID);
            if ((item != null) && (!(item.ToDate <= Framework.Utilities.Environment.GetServerTime()) || item.ToDate == null))
            {
                //if campaign not started then delete the cost element permanently
                if (Campaign.IsRuntime)
                {
                    item.ToDate = Framework.Utilities.Environment.GetServerTime();
                }
                else
                {
                    CostElements.Remove(item);
                }
            }
        }
        public virtual AdGroupCostElement AddGroupCostElement(AdGroupCostElement costElement, bool noException = false)
        {
            var elemtnts = GetCurrentCostElements().Where(x => x.CostElement.ID == costElement.CostElement.ID);

            if (costElement.Beneficiary != null)
            {
                elemtnts = elemtnts.Where(M => M.Beneficiary != null && M.Beneficiary.ID == costElement.Beneficiary.ID);

            }
            else
            {
                elemtnts = elemtnts.Where(M => M.Beneficiary == null);

            }
            if (elemtnts.Count() > 0)
            {
                if (costElement.Provider != null)
                {
                    elemtnts = elemtnts.Where(M => M.Provider != null && M.Provider.ID == costElement.Provider.ID);

                }
                else
                {
                    elemtnts = elemtnts.Where(M => M.Provider == null);

                }
            }
            if (elemtnts.Count() > 0)
            {
                // if two are nulls
                //if ((costElement.Beneficiary == null) && (elemtnts.FirstOrDefault(x => x.Beneficiary == null) != null))
                //{
                //    if(!noException)
                //    throw new CostElementAlreadyAddedException();
                //    else
                //        return null;
                //}
                ////have same beneficiary 
                //else if ((costElement.Beneficiary != null) && (elemtnts.FirstOrDefault(x => x.Beneficiary != null && x.Beneficiary.ID == costElement.Beneficiary.ID) != null))
                //{
                //    if (!noException)
                //        throw new CostElementAlreadyAddedException();
                //    else
                //        return null;
                //}
                //else if ((costElement.DataProvider == null) && (elemtnts.FirstOrDefault(x => x.DataProvider == null) != null))
                //{
                //    if (!noException)
                //        throw new CostElementAlreadyAddedException();
                //    else
                //        return null;
                //}
                //else if ((costElement.DataProvider != null) && (elemtnts.FirstOrDefault(x => x.DataProvider != null && x.DataProvider.ID == costElement.DataProvider.ID) != null))
                //{
                if (!noException)
                    throw new CostElementAlreadyAddedException();
                else
                    return null;
                // }
            }

            CostElements.Add(costElement);

            var totalPercantage = GetCurrentCostElements().Where(M => M.CostElement.Type ==(CalculationType) 1).Sum(M => M.Value) * 100;

            if (totalPercantage >= 100)
            {

                throw new CostElementPercentageAddedException();
            }
            return costElement;
        }
        #endregion


        #region Dynamic Bidding



        //public virtual IList<AdGroupCostElement> GetCurrentCostElements()
        //{
        //    return CostElements.Where(x => x.ToDate > Framework.Utilities.Environment.GetServerTime() || x.ToDate == null).ToList();
        //}
        public virtual void RemoveGroupDynamicBidding(AdGroupDynamicBiddingConfig config)
        {
            //find the element
            var item = AdGroupDynamicBiddingConfigs.FirstOrDefault(x => x.ID == config.ID);
            if ((item != null))
            {

                AdGroupDynamicBiddingConfigs.Remove(item);
              
            }
        }
        public virtual AdGroupDynamicBiddingConfig AddGroupDynamicBidding(AdGroupDynamicBiddingConfig config, bool noException = false)
        {
            var elemtnts = AdGroupDynamicBiddingConfigs.Where(x => x.Type== config.Type);

          
           
            if (elemtnts.Count() > 0)
            {
                // if two are nulls
                //if ((costElement.Beneficiary == null) && (elemtnts.FirstOrDefault(x => x.Beneficiary == null) != null))
                //{
                //    if(!noException)
                //    throw new CostElementAlreadyAddedException();
                //    else
                //        return null;
                //}
                ////have same beneficiary 
                //else if ((costElement.Beneficiary != null) && (elemtnts.FirstOrDefault(x => x.Beneficiary != null && x.Beneficiary.ID == costElement.Beneficiary.ID) != null))
                //{
                //    if (!noException)
                //        throw new CostElementAlreadyAddedException();
                //    else
                //        return null;
                //}
                //else if ((costElement.DataProvider == null) && (elemtnts.FirstOrDefault(x => x.DataProvider == null) != null))
                //{
                //    if (!noException)
                //        throw new CostElementAlreadyAddedException();
                //    else
                //        return null;
                //}
                //else if ((costElement.DataProvider != null) && (elemtnts.FirstOrDefault(x => x.DataProvider != null && x.DataProvider.ID == costElement.DataProvider.ID) != null))
                //{
                if (!noException)
                    throw new AdGroupDynamicBiddingConfigAlreadyAddedException();
                else
                    return null;
                // }
            }
            if (AdGroupDynamicBiddingConfigs==null)
            {
                AdGroupDynamicBiddingConfigs = new List<AdGroupDynamicBiddingConfig>();
            }

            if (config.Type != BidOptimizationType.MaximizeCTR)
                config.BidOptimizationValue = config.BidOptimizationValue;
            else
                config.BidOptimizationValue = config.BidOptimizationValue / 100;
            AdGroupDynamicBiddingConfigs.Add(config);
            this.AdGroupDynamicBiddingConfig = config;
            //var totalPercantage = GetCurrentCostElements().Where(M => M.CostElement.Type == (CalculationType)1).Sum(M => M.Value) * 100;

            //if (totalPercantage >= 100)
            //{

            //    throw new CostElementPercentageAddedException();
            //}
            return config;
        }


        public virtual AdGroupDynamicBiddingConfig UpdateGroupDynamicBidding(AdGroupDynamicBiddingConfig config)
        {
            var elemtnts = AdGroupDynamicBiddingConfigs.Where(x => x.Type == config.Type);



            if (elemtnts.Count() > 0 )
            {
                // if two are nulls
                //if ((costElement.Beneficiary == null) && (elemtnts.FirstOrDefault(x => x.Beneficiary == null) != null))
                //{
                //    if(!noException)
                //    throw new CostElementAlreadyAddedException();
                //    else
                //        return null;
                //}
                ////have same beneficiary 
                //else if ((costElement.Beneficiary != null) && (elemtnts.FirstOrDefault(x => x.Beneficiary != null && x.Beneficiary.ID == costElement.Beneficiary.ID) != null))
                //{
                //    if (!noException)
                //        throw new CostElementAlreadyAddedException();
                //    else
                //        return null;
                //}
                //else if ((costElement.DataProvider == null) && (elemtnts.FirstOrDefault(x => x.DataProvider == null) != null))
                //{
                //    if (!noException)
                //        throw new CostElementAlreadyAddedException();
                //    else
                //        return null;
                //}
                //else if ((costElement.DataProvider != null) && (elemtnts.FirstOrDefault(x => x.DataProvider != null && x.DataProvider.ID == costElement.DataProvider.ID) != null))
                //{
                    if(elemtnts.Where(x => x.Type == config.Type).SingleOrDefault().ID!= config.ID)
                    throw new AdGroupDynamicBiddingConfigAlreadyAddedException();
             
                // }
            }
            var element = AdGroupDynamicBiddingConfigs.Where(x => x.ID == config.ID).FirstOrDefault();
            

            if (element != null)
            {
                element.KeepBiddingAtMinimum = config.KeepBiddingAtMinimum;
                element.MaxBidPrice = config.MaxBidPrice;
                element.MinBidPrice = config.MinBidPrice;
                element.DefaultBidPrice = config.DefaultBidPrice;
                if(config.Type !=BidOptimizationType.MaximizeCTR)
                element.BidOptimizationValue = config.BidOptimizationValue;
                else
                    element.BidOptimizationValue = config.BidOptimizationValue/100;

            }

        
            return element;
        }
        #endregion

        public virtual AdGroupCostElement UpdateGroupCostElement(AdGroupCostElement costElement, decimal value)
        {
            var elemtnts = GetCurrentCostElements().Where(x => x.CostElement.ID == costElement.CostElement.ID && x.ID != costElement.ID).ToList();

            if (costElement.Beneficiary != null)
            {
                elemtnts = elemtnts.Where(M => M.Beneficiary != null && M.Beneficiary.ID == costElement.Beneficiary.ID).ToList();

            }
            else
            {
                elemtnts = elemtnts.Where(M => M.Beneficiary == null).ToList();

            }
            if (elemtnts.Count() > 0)
            {
                if (costElement.Provider != null)
                {
                    elemtnts = elemtnts.Where(M => M.Provider != null && M.Provider.ID == costElement.Provider.ID).ToList();

                }
                else
                {
                    elemtnts = elemtnts.Where(M => M.Provider == null).ToList();

                }
            }
            if (elemtnts.Count() > 0)
            {
                // if two are nulls
                /* if ((costElement.Beneficiary == null) && (elemtnts.FirstOrDefault(x => x.Beneficiary == null) != null))
                 {
                     throw new CostElementAlreadyAddedException();
                 }
                 //have same beneficiary 
                 else if ((costElement.Beneficiary != null) && (elemtnts.FirstOrDefault(x => x.Beneficiary != null && x.Beneficiary.ID == costElement.Beneficiary.ID) != null))
                 {
                     throw new CostElementAlreadyAddedException();
                 }

                 else if ((costElement.DataProvider == null) && (elemtnts.FirstOrDefault(x => x.DataProvider == null) != null))
                 {

                         throw new CostElementAlreadyAddedException();

                 }
                 else if ((costElement.DataProvider != null) && (elemtnts.FirstOrDefault(x => x.DataProvider != null && x.DataProvider.ID == costElement.DataProvider.ID) != null))
                 {

                         throw new CostElementAlreadyAddedException();

                 }*/

                throw new CostElementAlreadyAddedException();

            }
            var element = GetCurrentCostElements().Where(x => x.ID == costElement.ID).FirstOrDefault();


            if (element != null)
            {
                element.CostElement = costElement.CostElement;
                element.CostModelWrapper = costElement.CostModelWrapper;
                element.SetCostElementValue(value, costElement.CostModelWrapper);
                element.FromDate = costElement.FromDate;
                element.ToDate = costElement.ToDate;
                //  if (costElement.Provider != null)
                element.Provider = costElement.Provider;
                element.Scope = costElement.Scope;
                if (costElement.Beneficiary != null)
                    element.Beneficiary = costElement.Beneficiary;

            }

            var totalPercantage = GetCurrentCostElements().Where(M => M.CostElement.Type == (CalculationType)1).Sum(M => M.Value) * 100;

            if (totalPercantage>=100)
            {

                throw new CostElementPercentageAddedException();
            }
            return element;
        }


        public virtual AdGroupFee AddGroupFee(AdGroupFee costElement, bool noException = false)
        {
            var elemtnts = GetCurrentFees().Where(x => x.Fee.ID == costElement.Fee.ID);

            if (costElement.Beneficiary != null)
            {
                elemtnts = elemtnts.Where(M => M.Beneficiary != null && M.Beneficiary.ID == costElement.Beneficiary.ID);

            }
            else
            {
                elemtnts = elemtnts.Where(M => M.Beneficiary == null);

            }
            if (elemtnts.Count() > 0)
            {
                if (costElement.Provider != null)
                {
                    elemtnts = elemtnts.Where(M => M.Provider != null && M.Provider.ID == costElement.Provider.ID);

                }
                else
                {
                    elemtnts = elemtnts.Where(M => M.Provider == null);

                }
            }
            if (elemtnts.Count() > 0)
            {
                // if two are nulls
                //if ((costElement.Beneficiary == null) && (elemtnts.FirstOrDefault(x => x.Beneficiary == null) != null))
                //{
                //    if(!noException)
                //    throw new CostElementAlreadyAddedException();
                //    else
                //        return null;
                //}
                ////have same beneficiary 
                //else if ((costElement.Beneficiary != null) && (elemtnts.FirstOrDefault(x => x.Beneficiary != null && x.Beneficiary.ID == costElement.Beneficiary.ID) != null))
                //{
                //    if (!noException)
                //        throw new CostElementAlreadyAddedException();
                //    else
                //        return null;
                //}
                //else if ((costElement.DataProvider == null) && (elemtnts.FirstOrDefault(x => x.DataProvider == null) != null))
                //{
                //    if (!noException)
                //        throw new CostElementAlreadyAddedException();
                //    else
                //        return null;
                //}
                //else if ((costElement.DataProvider != null) && (elemtnts.FirstOrDefault(x => x.DataProvider != null && x.DataProvider.ID == costElement.DataProvider.ID) != null))
                //{
                if (!noException)
                    throw new FeeAlreadyAddedException();
                else
                    return null;
                // }
            }
            Fees.Add(costElement);
            return costElement;
        }

        public virtual AdGroupFee UpdateGroupFee(AdGroupFee costElement, decimal value)
        {
            var elemtnts = GetCurrentFees().Where(x => x.Fee.ID == costElement.Fee.ID && x.ID != costElement.ID).ToList();

            if (costElement.Beneficiary != null)
            {
                elemtnts = elemtnts.Where(M => M.Beneficiary != null && M.Beneficiary.ID == costElement.Beneficiary.ID).ToList();

            }
            else
            {
                elemtnts = elemtnts.Where(M => M.Beneficiary == null).ToList();

            }
            if (elemtnts.Count() > 0)
            {
                if (costElement.Provider != null)
                {
                    elemtnts = elemtnts.Where(M => M.Provider != null && M.Provider.ID == costElement.Provider.ID).ToList();

                }
                else
                {
                    elemtnts = elemtnts.Where(M => M.Provider == null).ToList();

                }
            }
            if (elemtnts.Count() > 0)
            {
                // if two are nulls
                /* if ((costElement.Beneficiary == null) && (elemtnts.FirstOrDefault(x => x.Beneficiary == null) != null))
                 {
                     throw new CostElementAlreadyAddedException();
                 }
                 //have same beneficiary 
                 else if ((costElement.Beneficiary != null) && (elemtnts.FirstOrDefault(x => x.Beneficiary != null && x.Beneficiary.ID == costElement.Beneficiary.ID) != null))
                 {
                     throw new CostElementAlreadyAddedException();
                 }

                 else if ((costElement.DataProvider == null) && (elemtnts.FirstOrDefault(x => x.DataProvider == null) != null))
                 {

                         throw new CostElementAlreadyAddedException();

                 }
                 else if ((costElement.DataProvider != null) && (elemtnts.FirstOrDefault(x => x.DataProvider != null && x.DataProvider.ID == costElement.DataProvider.ID) != null))
                 {

                         throw new CostElementAlreadyAddedException();

                 }*/

                throw new FeeAlreadyAddedException();

            }
            var element = GetCurrentFees().Where(x => x.ID == costElement.ID).FirstOrDefault();
            if (element != null)
            {
                element.Fee = costElement.Fee;
                element.CostModelWrapper = costElement.CostModelWrapper;
                element.SetCostElementValue(value, costElement.CostModelWrapper);
                element.FromDate = costElement.FromDate;
                element.ToDate = costElement.ToDate;
                //  if (costElement.Provider != null)
                element.Provider = costElement.Provider;
                element.Scope = costElement.Scope;
                if (costElement.Beneficiary != null)
                    element.Beneficiary = costElement.Beneficiary;

            }

            return element;
        }
        public virtual bool SetAccountFeesSaved(int accountId, int DPPartner = 0)
        {
            var elemtnts = GetCurrentFees();
            var costElements = accountFeeRepository.GetAccountFees(accountId);

            if (costElements != null)
            {
                foreach (var costElm in costElements)
                {
                    AdGroupFee adroupCostElment = new AdGroupFee();


                    adroupCostElment.Fee = costElm.Fee;
                    adroupCostElment.FromDate = Framework.Utilities.Environment.GetServerTime();
                    adroupCostElment.Scope = AdGroupCostElementScope.Inventory;
                    adroupCostElment.CostModelWrapper = this.CostModelWrapper;
                    if (costElm.Beneficiary != null)
                    {
                        adroupCostElment.Beneficiary = costElm.Beneficiary;
                    }
                    List<AdActionCostModelWrapper> adactoinwrappers = null;
                    if (OperationContext.Current.UserInfo<ArabyAds.Framework.UserInfo.IUserInfo>().AccountRole == (int)AccountRole.DSP /*|| (OperationContext.Current.UserInfo<ArabyAds.Framework.UserInfo.IUserInfo>().ImpersonatedAccount != null && OperationContext.Current.UserInfo<ArabyAds.Framework.UserInfo.IUserInfo>().ImpersonatedAccount.AccountRole == (int)AccountRole.DSP)*/)
                    {

                        adactoinwrappers = this.Objective.AdAction.AdActionCostModelWrappers.Where(M => M.Scope == AppScope.DSP || M.Scope == AppScope.Both).ToList();
                    }
                    else

                    {
                        adactoinwrappers = this.Objective.AdAction.AdActionCostModelWrappers.Where(M => M.Scope == AppScope.Network || M.Scope == AppScope.Both).ToList();

                    }
                    int costmodelId = 0;
                    if (this.CostModelWrapper != null)
                    {

                        costmodelId= this.CostModelWrapper.ID;
                    }
                    else
                    {
                        costmodelId= adactoinwrappers[0].CostModelWrapper.ID;
                    }
                        var costValue = costElm.Fee.Values.Where(M => M.CostModelWrapper.ID == costmodelId).FirstOrDefault();
                    // CostModelWrapper CostModelWrapper
                    if (costValue != null)
                    {
                        adroupCostElment.SetValue(costValue.Value);
                        //  adroupCostElment.SetCostElementValue(costValue.Value, this.CostModelWrapper);
                    }
                    if (DPPartner > 0)
                    {

                        adroupCostElment.Provider = new Core.DPPartner { ID = DPPartner };
                        adroupCostElment.Scope = AdGroupCostElementScope.DataProvider;
                    }
                    adroupCostElment.AdGroup = this;
                    if (this.Fees==null)
                    {
                        this.Fees = new List<AdGroupFee>();
                    }
                    AddGroupFee(adroupCostElment, true);
                }
                var elemtntsAfter = GetCurrentFees();
                if (elemtntsAfter.Count != elemtnts.Count)
                {
                    return true;
                }
            }
            return false;

        }
        public virtual IList<AdGroupFee> GetCurrentFees()
        {
            return Fees!=null? Fees.Where(x => x.ToDate > Framework.Utilities.Environment.GetServerTime() || x.ToDate == null).ToList(): new List<AdGroupFee>();
        }
        public virtual void RemoveGroupFee(AdGroupFee costElement)
        {
            //find the element
            var item = Fees.FirstOrDefault(x => x.ID == costElement.ID);
            if ((item != null) && (!(item.ToDate <= Framework.Utilities.Environment.GetServerTime()) || item.ToDate == null))
            {
                //if campaign not started then delete the cost element permanently
                if (Campaign.IsRuntime)
                {
                    item.ToDate = Framework.Utilities.Environment.GetServerTime();
                    item.IsRemoved = true;
                }
                else
                {
                    Fees.Remove(item);
                }
            }
        }
        public virtual List<AdGroupTrackingEvent> GetTrackingEvents()
        {
            if (TrackingEvents == null)
            {
                return new List<AdGroupTrackingEvent>();
            }
            return this.TrackingEvents.Where(p => !p.IsDeleted).ToList();
        }
        public virtual List<AdGroupConversionEvent> GetConversionEvents()
        {
            if (ConversionEvents == null)
            {
                return new List<AdGroupConversionEvent>();
            }
            return this.ConversionEvents.Where(p => !p.IsDeleted).ToList();
        }
        public virtual List<AdGroupEvent> GetEvents()
        {
            if (AdGroupEvents == null)
            {
                return new List<AdGroupEvent>();
            }
            return this.AdGroupEvents.Where(p => !p.IsDeleted).ToList();
        }

        //public virtual List<AdGroupTrackingEvent> GetTrackingModifiedEvents()
        //{
        //    if (TrackingEvents == null)
        //    {
        //        return new List<AdGroupTrackingEvent>();
        //    }
        //    return this.TrackingEvents.Where(p => !p.IsDeleted).ToList();
        //}
        //public virtual List<AdGroupConversionEvent> GetConversionModifiedEvents()
        //{
        //    if (AdGroupEv == null)
        //    {
        //        return new List<AdGroupConversionEvent>();
        //    }
        //    return this.ConversionEvents.Where(p => !p.IsDeleted).ToList();
        //}

        public virtual IList<AdCreative> GetAds()
        {
            return Ads.Where(x => x.IsDeleted == false).ToList();
        }
        public virtual List<int> GetAudienceSegmentsForExternal()
        {
            List<int> results = new List<int>();

            var audienceSegmentTargetings = this.Targetings.ToList().OfType<AudienceSegmentTargeting>().Where(M => M.IsExternal == true && M.IsDeleted == false).ToList();
            string jsonObj = string.Empty;
            if (audienceSegmentTargetings != null && audienceSegmentTargetings.Count>0)
            {
                foreach (var audienceSegmentTargeting in audienceSegmentTargetings)
                {
                  var  teemresults= audienceSegmentTargeting.GetAudienceSegmentIds();
                    results.AddRange(teemresults);
                }
               

            }
            return results.Distinct().ToList();
        }
        public virtual int GetDeviceTargetingTypeId()
        {
            var dviceTargeting = Targetings.ToList().OfType<DeviceTargeting>().FirstOrDefault();
            return dviceTargeting.TargetingType.ID;
        }
        public override bool Resume()
        {
            //this.Status = AdGroupStatus.Running;
            foreach (var adCreative in GetAds())
            {
                adCreative.Resume();
            }
            return base.Resume();
        }
        public override bool Delete()
        {
            foreach (var adCreative in GetAds())
            {
                adCreative.Delete();
            }
            foreach (var bidConfig in GetCampaignBidConfigs())
            {
                bidConfig.Delete();
            }

            return base.Delete();
        }
        public override bool Pause()
        {
            //this.Status = AdGroupStatus.AttentionActionNeeded;
            IList<int> adsId = new List<int>();
            foreach (var adCreative in GetAds())
            {
                adsId.Add(adCreative.ID);
                adCreative.PublishEventFromAdGroup = true;
                adCreative.Pause();
            }
            //PublishAdCreatPauseEventForKafka(adsId);
           // PublishAdGroupPauseEventForKafka();
            return base.Pause();
        }
        public virtual void PublishAdCreatPauseEventForKafka(IList<int> Ids)
        {



            if (Configuration.KafkaEnabled && (Ids!=null && Ids.Count>0) )
                Configuration.KafkaEventPublisher.Publish(new PauseAdEvent { AdIds = Ids });
        }
        public virtual void SetCostModelWrapper(CostModelWrapper costModelWrapper)
        {
            if (costModelWrapper == null) { throw new ArgumentNullException(); }

            int factor = costModelWrapper.Factor;

            if (this.CostModelWrapper != null && this.CostModelWrapper.ID != costModelWrapper.ID)
            {
                foreach (var item in this.GetAds())
                {
                    item.SetAdCreativeBid(item.GetReadableBid(), factor);
                }
            }

            this.CostModelWrapper = costModelWrapper;
        }

        public virtual bool AddAd(AdCreative ad)
        {
            //if (this.AudianceDiscountPrice.HasValue)
            //{
            //    ad.DataBid = this.AudianceDiscountPrice;

            //}
            //TargetingBase AudienceSegmentTargeting = Targetings.Where(x => x is AudienceSegmentTargeting).FirstOrDefault();
            //if (AudienceSegmentTargeting != null)
            //{
            //    decimal? MaxBid = GetMaxDataBid(AudienceSegmentTargeting as AudienceSegmentTargeting);
            //    ad.MaxDataBid = MaxBid;

            //}
            Ads.Add(ad);
            return true;
        }
        protected virtual decimal? GetMaxDataBid(AudienceSegmentTargeting AudienceSegmentTargeting)
        {
            AudicanceBillSummary result = null;
              var Expression = AudienceSegmentTargeting.GetRulesForExpression(0, true);
            if(Expression!=null && Expression.Version_1!=null)
             result = AudienceSegmentTargeting.CalculateBillInternal(Expression.Version_1);
            return result != null ? result.MaxValue : (decimal?)null;
        }

        public virtual bool IsDataProviderAllowImpression()
        {

            var audienceSegmentTargetingS = this.Targetings.ToList().OfType<AudienceSegmentTargeting>();
           
            if (audienceSegmentTargetingS != null)
            {
                foreach (var audienceSegmentTargeting in audienceSegmentTargetingS)
                {

                    if (audienceSegmentTargeting is AudienceSegmentTargeting)
                    {
                        
                     
                            var result = audienceSegmentTargeting.CheckIfDataProviderImpressionAllowed(this, audienceSegmentTargeting.GetRulesJsonForGroup());
                        if (!result)
                        {
                            return false;
                        }
                    }
                }
            }

            return true;

        }


        public virtual bool IsUsingMyAudienceListTargeting()
        {

            var audienceSegmentTargetingS = this.Targetings.ToList().OfType<AudienceSegmentTargeting>();

            if (audienceSegmentTargetingS != null) 
            {
                foreach (var audienceSegmentTargeting in audienceSegmentTargetingS)
                {

                    if (audienceSegmentTargeting is AudienceSegmentTargeting)
                    {


                        var result = audienceSegmentTargeting.CheckIfDataProviderUsingFirstParty(this, audienceSegmentTargeting.GetRulesJsonForGroup());
                       
                            return result;
                       
                    }
                }
            }

            return false;

        }
        public virtual void SetAdsMaxDataBid(AudienceSegmentTargeting AudienceSegmentTargeting)
        {
            decimal? MaxBid = GetMaxDataBid(AudienceSegmentTargeting);
            AudienceSegmentTargeting.MaxDataBid = MaxBid;
           // if(!AudienceSegmentTargeting.IsExternal)
            AudienceSegmentTargeting.DataBid = this.AudianceDiscountPrice;
            //this.DataBid = this.AudianceDiscountPrice;

            //  else
            //  AudienceSegmentTargeting.DataBid = MaxBid;
            //if (Ads!=null)
            //{
            //    foreach (AdCreative ad in Ads)
            //    {
            //        ad.MaxDataBid = MaxBid;
            //    }
            //}
        }
        //public virtual void SetAdsMaxDataBid()
        //{
        //    if (Targetings != null && Targetings.Count() > 0)
        //    {
        //        AudienceSegmentTargeting AudienceSegmentTargeting = Targetings.Where(x => x is AudienceSegmentTargeting).FirstOrDefault() as AudienceSegmentTargeting;
        //        if (AudienceSegmentTargeting != null)
        //        {
        //            decimal? MaxBid = GetMaxDataBid(AudienceSegmentTargeting);
        //            foreach (AdCreative ad in Ads)
        //            {
        //                ad.MaxDataBid = MaxBid;
        //            }
        //        }
        //    }
        //}

        #region BidConfig

        public virtual decimal GetReadableBid()
        {
            if (this == null || this.CostModelWrapper == null)
                return this.Bid;

            return this.Bid * this.CostModelWrapper.Factor;
        }
        public virtual decimal GetBid()
        {
            return this.Bid;
        }
        public virtual void SetAdGroupBid(decimal value, int factor)
        {
            this.Bid = value / factor;

            
        }


        public virtual IList<AdGroupBidConfig> GetCampaignBidConfigs(bool? reurtnIsDeleted = false)
        {
            if (reurtnIsDeleted.HasValue)
            {
                return this.CampaignBidConfigs.Where(x => x.IsDeleted == reurtnIsDeleted).ToList();
            }
            else
            {
                return this.CampaignBidConfigs.Where(x => !x.IsDeleted).ToList();
            }
        }

        public virtual IList<AdGroupInventorySource> GetAdGroupInventorySources(bool? reurtnIsDeleted = false)
        {
            if (reurtnIsDeleted.HasValue)
            {
                return this.AdGroupInventorySources.Where(x => x.IsDeleted == reurtnIsDeleted).ToList();
            }
            else
            {
                return this.AdGroupInventorySources.Where(x => !x.IsDeleted).ToList();
            }
        }
        public virtual void AddUpdateInventorySourceForSubSites(AdGroupInventorySource InventorySource)
        {
            AdGroupInventorySource existInventorySource = null;
            //x.ID != campaignBidConfig.ID &&
            var existInventorySources = GetAdGroupInventorySources(false).Where(x =>  x.Partner.ID == InventorySource.Partner.ID
                          && x.AdGroup.ID == this.ID).ToList();

            if (existInventorySources != null)
            {
               
                    existInventorySources = existInventorySources.Where(M => M.AppSite != null && M.AppSite.ID == InventorySource.AppSite.ID).ToList();

                

                if (existInventorySources != null)
                {
                   
                        existInventorySources = existInventorySources.Where(M => M.SubAppsite != null && M.SubAppsite.ID == InventorySource.SubAppsite.ID).ToList();

                   
                    existInventorySource=existInventorySources.FirstOrDefault();

                }
            }
            if (existInventorySource != null)// Incase add already exist campaignBidConfig for the same group wiht same Account.Id and Appsite.Id  
            {// update the existing item 
                existInventorySource.IsDeleted = false;
                existInventorySource.Include = InventorySource.Include;
                return;
            }
            if (InventorySource.AdGroup == null)
            {
                InventorySource.AdGroup = this;
                InventorySource.Campaign = this.Campaign;
                InventorySource.IsDeleted = false;
            }
            if (this.AdGroupInventorySources == null)
            {
                this.AdGroupInventorySources = new List<AdGroupInventorySource>();
            }
            this.AdGroupInventorySources.Add(InventorySource);
        }
        public virtual void DeleteInventorySourceForSubSites(int Id)
        {
           // AdGroupInventorySource existInventorySource = null;
            //x.ID != campaignBidConfig.ID &&
            var existInventorySources = GetAdGroupInventorySources(false).Where(x =>  x.AdGroup.ID == this.ID && x.SubAppsite != null && x.SubAppsite.ID == Id).ToList();

            if (existInventorySources != null)
            {
                foreach (var existInventorySource in existInventorySources )
                { existInventorySource.IsDeleted = true; }
            }
           
            
            
        }
        public virtual void AddInventorySource(AdGroupInventorySource InventorySource)
        {
            AdGroupInventorySource existInventorySource = null;
            //x.ID != campaignBidConfig.ID &&
            var existInventorySources = GetAdGroupInventorySources(true).Where(x => x.ID != InventorySource.ID && x.Partner.ID == InventorySource.Partner.ID
                          && x.AdGroup.ID == this.ID).ToList();

            if (existInventorySources != null)
            {
                if (InventorySource.AppSite != null)
                {
                    existInventorySources = existInventorySources.Where(M => M.AppSite != null && M.AppSite.ID == InventorySource.AppSite.ID).ToList();

                }
                else
                {
                    existInventorySources = existInventorySources.Where(M => M.AppSite == null).ToList();
                }

                if (existInventorySources != null)
                {
                    if (InventorySource.SubAppsite != null)
                    {
                        existInventorySources = existInventorySources.Where(M => M.SubAppsite != null && M.SubAppsite.ID == InventorySource.SubAppsite.ID).ToList();

                    }
                    else
                    {
                        existInventorySources = existInventorySources.Where(M => M.SubAppsite == null).ToList();

                    }
                }
            }
            if (existInventorySource != null)// Incase add already exist campaignBidConfig for the same group wiht same Account.Id and Appsite.Id  
            {// update the existing item 
                existInventorySource.IsDeleted = false;
                existInventorySource.Include = InventorySource.Include;
                return;
            }
            if (InventorySource.AdGroup == null)
            {
                InventorySource.AdGroup = this;
                InventorySource.Campaign = this.Campaign;
                InventorySource.IsDeleted = false;
            }
            if (this.AdGroupInventorySources == null)
            {
                this.AdGroupInventorySources = new List<AdGroupInventorySource>();
            }
            this.AdGroupInventorySources.Add(InventorySource);
        }

        public virtual void DeleteInventorySource(int id)
        {
            AdGroupInventorySource adGroupInventorySource = this.AdGroupInventorySources.Where(x => x.ID == id).FirstOrDefault();
            if (adGroupInventorySource != null)
            {
                adGroupInventorySource.IsDeleted = true;
            }
        }




        public virtual IList<AdGroupBidModifier> GetAdGroupBidModifiers(bool? reurtnIsDeleted = false)
        {
            if (reurtnIsDeleted.HasValue && this.AdGroupBidModifiers!=null)
            {
                return this.AdGroupBidModifiers.Where(x => x.IsDeleted == reurtnIsDeleted).ToList();
            }
            else if( this.AdGroupBidModifiers != null)
            {
                return this.AdGroupBidModifiers.Where(x => !x.IsDeleted).ToList();
            }
            return new List<AdGroupBidModifier>();
        }

        public virtual void AddAdGroupBidModifier(AdGroupBidModifier modifier)
        {
            AdGroupBidModifier existAdGroupModfier = null;
            //x.ID != campaignBidConfig.ID &&
             existAdGroupModfier = GetAdGroupBidModifiers().Where(x => x.ID == modifier.ID 
                           ).FirstOrDefault();

          
            if (existAdGroupModfier != null && existAdGroupModfier.ID != 0)// Incase add already exist campaignBidConfig for the same group wiht same Account.Id and Appsite.Id  
            {// update the existing item 
                existAdGroupModfier.IsDeleted = false;
                existAdGroupModfier.Multiplier = modifier.Multiplier;

                existAdGroupModfier.DimentionType = modifier.DimentionType;
                existAdGroupModfier.DimensionValue = modifier.DimensionValue;
                return;
            }
            if (modifier.AdGroup == null)
            {
                modifier.AdGroup = this;
                modifier.Campaign = this.Campaign;
                modifier.IsDeleted = false;
            }
            if (this.AdGroupBidModifiers == null)
            {
                this.AdGroupBidModifiers = new List<AdGroupBidModifier>();
            }
            this.AdGroupBidModifiers.Add(modifier);
        }

        public virtual void DeleteAdGroupBidModifier(int id)
        {
            if (this.AdGroupBidModifiers != null)
            {
                AdGroupBidModifier modifier = this.AdGroupBidModifiers.Where(x => x.ID == id).FirstOrDefault();
                if (modifier != null)
                {
                    modifier.IsDeleted = true;
                }
            }
        }


        public virtual IList<PMPDeal> GetPMPDeal()
        {


            var targarting = this.Targetings.ToList().OfType<AdPMPDealTargeting>();

            if (targarting != null)
                return targarting.Select(M => M.Deal).ToList();
            else
                return new List<PMPDeal>();
        }

        public virtual IList<AdvertiserAccountMasterAppSite> GetAccountMasterAppSiteLists()
        {


            var targarting = this.Targetings.ToList().OfType<MasterAppSiteTargeting>();

            if (targarting != null)
                return targarting.Select(M => M.List).ToList();
            else
                return new List<AdvertiserAccountMasterAppSite>();
        }
        public virtual void AddCampaignBidConfig(AdGroupBidConfig campaignBidConfig)
        {
            //x.ID != campaignBidConfig.ID &&
            AdGroupBidConfig existCampaignBidConfig = GetCampaignBidConfigs(true).Where(x => x.ID != campaignBidConfig.ID && x.Account.ID == campaignBidConfig.Account.ID && x.AppSite.ID == campaignBidConfig.AppSite.ID
                        && x.AdGroup.ID == campaignBidConfig.AdGroup.ID && x.SubPublisherId == campaignBidConfig.SubPublisherId).FirstOrDefault();

            if (existCampaignBidConfig != null )// Incase add already exist campaignBidConfig for the same group wiht same Account.Id and Appsite.Id  
            {// update the existing item 
                existCampaignBidConfig.IsDeleted = false;
                existCampaignBidConfig.Bid = campaignBidConfig.Bid;
                return;
            }
            if (campaignBidConfig.AdGroup == null)
            {
                campaignBidConfig.AdGroup = this;
                campaignBidConfig.IsDeleted = false;
            }
            if (this.CampaignBidConfigs == null)
            {
                this.CampaignBidConfigs = new List<AdGroupBidConfig>();
            }
            this.CampaignBidConfigs.Add(campaignBidConfig);
        }

        public virtual void DeleteCampaignBidConfig(int id)
        {
            AdGroupBidConfig campaignBidConfig = this.CampaignBidConfigs.Where(x => x.ID == id).FirstOrDefault();
            if (campaignBidConfig != null)
            {
                campaignBidConfig.IsDeleted = true;
            }
        }

        #endregion
        public virtual bool IsContainsAds()
        {
            return
                GetAds().Any(x =>
                        x.Status.ID == AdCreativeStatus.Active.ID || x.Status.ID == AdCreativeStatus.ActiveAdServer.ID ||
                        x.Status.ID == AdCreativeStatus.BudgetPaused.ID ||
                        x.Status.ID == AdCreativeStatus.Completed.ID ||
                       (x.PausedStatus != null && (x.PausedStatus.ID == AdCreativeStatus.Active.ID || x.PausedStatus.ID == AdCreativeStatus.ActiveAdServer.ID)) ||
                       (x.PausedStatus != null && x.PausedStatus.ID == AdCreativeStatus.BudgetPaused.ID) ||
                       (x.PausedStatus != null && x.PausedStatus.ID == AdCreativeStatus.Completed.ID));
        }

        public override AdGroup Clone()
        {
            return Clone(this.Campaign);
        }

        public virtual AdGroup Clone(Campaign campaign)
        {
            var cloneObj = new AdGroup()
            {ViewabilityVendorId=this.ViewabilityVendorId,
                ConnectionType = this.ConnectionType,
                Bid = this.Bid,
                CountingTypeAttribuation=this.CountingTypeAttribuation,
                MinimumUnitPrice = this.MinimumUnitPrice,
                AudianceDiscountPrice = this.AudianceDiscountPrice,
                Campaign = campaign,
                AdPosition = this.AdPosition,
                CostModelWrapper = this.CostModelWrapper,
                CreationDate = Framework.Utilities.Environment.GetServerTime(),
                IsDeleted = this.IsDeleted,
                Name = this.Name,
                BiddingStrategy = this.BiddingStrategy,
                AdGroupDynamicBiddingConfig = this.AdGroupDynamicBiddingConfig !=null ? this.AdGroupDynamicBiddingConfig.Clone(): null,
                DailyBudget = this.DailyBudget,
                IgnoreDailyBudget = this.IgnoreDailyBudget,
                Budget = this.Budget,
                DisableProxyTraffic = this.DisableProxyTraffic,
                IsWifi = this.IsWifi,
                MaxDataBid = this.MaxDataBid,
                DataBid = this.DataBid,
                IsCellular = this.IsCellular,
                LogAdMarkup = this.LogAdMarkup,
                UniqueId = Guid.NewGuid().ToString(),
                Pacing = this.Pacing,
                AllowOpenAuction = this.AllowOpenAuction,
                OnlyWIFI = this.OnlyWIFI,
                Objective = this.Objective.Copy(),
                Targetings = new List<TargetingBase>(),
                Ads = new List<AdCreative>(),
                CostElements = new List<AdGroupCostElement>(),
                Fees = new List<AdGroupFee>(),
                AdGroupInventorySources = new List<AdGroupInventorySource>(),
                AdGroupDynamicBiddingConfigs = new List<AdGroupDynamicBiddingConfig>(),
                HouseAd = this.HouseAd != null ? this.HouseAd.Clone() : null,
                CPMValue = this.CPMValue,
                TrackInstalls = this.TrackInstalls,
                OpenInExternalBrowser = this.OpenInExternalBrowser,
                IsCostModelChanged = this.IsCostModelChanged,

                ConversionSetting = this.ConversionSetting,
                ConversionType = this.ConversionType,
                ViewAttribuation = this.ViewAttribuation,
                ClickAttribuation = this.ClickAttribuation,
                CountingAttribuation = this.CountingAttribuation,




    };
            if(cloneObj.AdGroupDynamicBiddingConfig!=null)
            cloneObj.AdGroupDynamicBiddingConfig.AdGroup = cloneObj;
            cloneObj.Objective.AdGroup = cloneObj;
            if (cloneObj.HouseAd != null)
            {
                cloneObj.HouseAd.AdGroup = cloneObj;
            }

            foreach (var targetingBase in Targetings)
            {
                var targetingCLone = targetingBase.Copy();
                targetingCLone.AdGroup = cloneObj;
                //TODO:Osaleh to change the Device Targeting AdGroup Value
                cloneObj.Targetings.Add(targetingCLone);
            }

            // Cloning trackers should be here before cloning the ads, because we need the cloned trackers 
            // to link them when clone adcreativeunits
            if (this.Targetings != null)
            {
                //cloneObj.TrackingEvents = new List<AdGroupTrackingEvent>();
                //foreach (var trackingEvent in GetTrackingEvents())
                //{
                //    var clonedTrackingEvent = new AdGroupTrackingEvent()
                //    {
                //        Description = trackingEvent.Description,
                //        Code = trackingEvent.Code,
                //        AllPreRequisitesRequired = trackingEvent.AllPreRequisitesRequired,
                //        IsBillable = trackingEvent.IsBillable,
                //        IsPrimary = trackingEvent.IsPrimary,
                //        ValidFor = trackingEvent.ValidFor,
                //        IsTracking = trackingEvent.IsTracking,
                 
                //        IsConversion = trackingEvent.IsConversion,
                //        StatisticsColumnName = trackingEvent.StatisticsColumnName,
                //        IsCustom = trackingEvent.IsCustom,
                //        AdGroup = cloneObj

                //    };
                //    if (trackingEvent.AudienceSegmentListsMap!=null && trackingEvent.AudienceSegmentListsMap.Count>0)
                //    {
                //        clonedTrackingEvent.AudienceSegmentListsMap = new List<AudienceSegmentEventMap>();
                //        foreach (var AudienceSegment in trackingEvent.AudienceSegmentListsMap)
                //        {

                //            clonedTrackingEvent.AudienceSegmentListsMap.Add(
                //                new AudienceSegmentEventMap
                //                {
                //                    IsDeleted = AudienceSegment.IsDeleted,
                //                    Event = AudienceSegment.Event,
                //                    AudienceSegment = AudienceSegment.AudienceSegment


                //                }


                //                );
                //        }

                //        }
                //    cloneObj.TrackingEvents.Add(clonedTrackingEvent);
                //}




                //cloneObj.ConversionEvents = new List<AdGroupConversionEvent>();
                //foreach (var trackingEvent in GetConversionEvents())
                //{
                //    var clonedTrackingEvent = new AdGroupConversionEvent()
                //    {
                //        Description = trackingEvent.Description,
                //        Code = trackingEvent.Code,
                //        AllPreRequisitesRequired = trackingEvent.AllPreRequisitesRequired,
                //        IsBillable = trackingEvent.IsBillable,
                //        IsConversion = trackingEvent.IsConversion,
                //        IsTracking = trackingEvent.IsTracking,
                //        Revenue = trackingEvent.Revenue,
                //        ValidFor = trackingEvent.ValidFor,
                //        StatisticsColumnName = trackingEvent.StatisticsColumnName,
                //        IsCustom = trackingEvent.IsCustom,
                //        AdGroup = cloneObj

                //    };
                //    if (trackingEvent.PixelListsMap != null && trackingEvent.PixelListsMap.Count > 0)
                //    {
                //        clonedTrackingEvent.PixelListsMap = new List<PixelEventMap>();
                //        foreach (var AudienceSegment in trackingEvent.PixelListsMap)
                //        {

                //            clonedTrackingEvent.PixelListsMap.Add(
                //                new PixelEventMap
                //                {
                //                    IsDeleted = AudienceSegment.IsDeleted,
                //                    Event = AudienceSegment.Event,
                //                    Pixel = AudienceSegment.Pixel


                //                }


                //                );
                //        }

                //    }
                //    cloneObj.ConversionEvents.Add(clonedTrackingEvent);
                //}


                cloneObj.AdGroupEvents = new List<AdGroupEvent>();
                cloneObj.TrackingEvents = new List<AdGroupTrackingEvent>();
                cloneObj.ConversionEvents = new List<AdGroupConversionEvent>();
                foreach (var trackingEvent in GetTrackingEvents())
                {
                   

                      var clonedTrackingEvent = new AdGroupTrackingEvent()
                    {
                        Description = trackingEvent.Description,
                        Code = trackingEvent.Code,
                        AllPreRequisitesRequired = trackingEvent.AllPreRequisitesRequired,
                        IsBillable = trackingEvent.IsBillable,
                          AllowDuplicate = trackingEvent.AllowDuplicate,
                          IsConversion = trackingEvent.IsConversion,
                        IsTracking = trackingEvent.IsTracking,
                        Revenue = trackingEvent.Revenue,
                        ValidFor = trackingEvent.ValidFor,
                        StatisticsColumnName = trackingEvent.StatisticsColumnName,
                        IsCustom = trackingEvent.IsCustom,
                        AdGroup = cloneObj,
                       IsPrimary = trackingEvent.IsPrimary,


                    


                    };
                    
                    if (trackingEvent.PixelListsMap != null && trackingEvent.PixelListsMap.Count > 0)
                    {
                        clonedTrackingEvent.PixelListsMap = new List<PixelEventMap>();
                        foreach (var AudienceSegment in trackingEvent.PixelListsMap)
                        {

                            clonedTrackingEvent.PixelListsMap.Add(
                                new PixelEventMap
                                {
                                    IsDeleted = AudienceSegment.IsDeleted,
                                    Event = clonedTrackingEvent,
                                    Pixel = AudienceSegment.Pixel


                                }


                                );
                        }

                    }

                    if (trackingEvent.AudienceSegmentListsMap != null && trackingEvent.AudienceSegmentListsMap.Count > 0)
                    {
                        clonedTrackingEvent.AudienceSegmentListsMap = new List<AudienceSegmentEventMap>();
                        foreach (var AudienceSegment in trackingEvent.AudienceSegmentListsMap)
                        {

                            clonedTrackingEvent.AudienceSegmentListsMap.Add(
                                new AudienceSegmentEventMap
                                {
                                    IsDeleted = AudienceSegment.IsDeleted,
                                    Event = clonedTrackingEvent,
                                    AudienceSegment = AudienceSegment.AudienceSegment


                                }


                                );
                        }

                    }

                  
                    if (clonedTrackingEvent.IsTracking && cloneObj.TrackingEvents.Where(M=>M.Code== clonedTrackingEvent.Code).SingleOrDefault()==null)
                    {
                        cloneObj.TrackingEvents.Add((AdGroupTrackingEvent)clonedTrackingEvent);

                       
                    }
                  

                }
                foreach (var trackingEvent in GetConversionEvents())
                {


                    var clonedTrackingEvent = new AdGroupConversionEvent()
                    {
                        Description = trackingEvent.Description,
                        Code = trackingEvent.Code,
                        AllPreRequisitesRequired = trackingEvent.AllPreRequisitesRequired,
                        IsBillable = trackingEvent.IsBillable,
                        AllowDuplicate = trackingEvent.AllowDuplicate,
                        IsConversion = trackingEvent.IsConversion,
                        IsTracking = trackingEvent.IsTracking,
                        Revenue = trackingEvent.Revenue,
                        ValidFor = trackingEvent.ValidFor,
                        StatisticsColumnName = trackingEvent.StatisticsColumnName,
                        IsCustom = trackingEvent.IsCustom,
                        AdGroup = cloneObj,
                        IsPrimary = trackingEvent.IsPrimary,





                    };

                    if (trackingEvent.PixelListsMap != null && trackingEvent.PixelListsMap.Count > 0)
                    {
                        clonedTrackingEvent.PixelListsMap = new List<PixelEventMap>();
                        foreach (var AudienceSegment in trackingEvent.PixelListsMap)
                        {

                            clonedTrackingEvent.PixelListsMap.Add(
                                new PixelEventMap
                                {
                                    IsDeleted = AudienceSegment.IsDeleted,
                                    Event = clonedTrackingEvent,
                                    Pixel = AudienceSegment.Pixel


                                }


                                );
                        }

                    }

                    if (trackingEvent.AudienceSegmentListsMap != null && trackingEvent.AudienceSegmentListsMap.Count > 0)
                    {
                        clonedTrackingEvent.AudienceSegmentListsMap = new List<AudienceSegmentEventMap>();
                        foreach (var AudienceSegment in trackingEvent.AudienceSegmentListsMap)
                        {

                            clonedTrackingEvent.AudienceSegmentListsMap.Add(
                                new AudienceSegmentEventMap
                                {
                                    IsDeleted = AudienceSegment.IsDeleted,
                                    Event = clonedTrackingEvent,
                                    AudienceSegment = AudienceSegment.AudienceSegment


                                }


                                );
                        }

                    }

                  
                  
                    if (clonedTrackingEvent.IsConversion && cloneObj.ConversionEvents.Where(M => M.Code == clonedTrackingEvent.Code).SingleOrDefault() == null && cloneObj.TrackingEvents.Where(M => M.Code == clonedTrackingEvent.Code).SingleOrDefault() == null)
                    {
                        cloneObj.ConversionEvents.Add((AdGroupConversionEvent)clonedTrackingEvent);


                    }

                }
            }


            campaign.AddGroup(cloneObj);
            campaignRepository.Save(campaign);

            foreach (var ad in GetAds())
            {
                var adClone = ad.Clone(cloneObj);
                cloneObj.Ads.Add(adClone);
            }
            if (this.CostElements != null)
            {
                foreach (var costElement in GetCurrentCostElements())
                {
                    var costElementClone = costElement.Clone();
                    costElementClone.AdGroup = cloneObj;
                    costElementClone.FromDate = Framework.Utilities.Environment.GetServerDateHours();
                    cloneObj.CostElements.Add(costElementClone);
                }
            }

            //if (this.AdGroupDynamicBiddingConfigs != null)
            //{
                
            //    foreach (var AdGroupDynamicBiddingConfig in this.AdGroupDynamicBiddingConfigs)
            //    {
            //        var AdGroupDynamicBiddingConfigc = AdGroupDynamicBiddingConfig.Clone();
            //        AdGroupDynamicBiddingConfigc.AdGroup = cloneObj;
                 
            //        cloneObj.AdGroupDynamicBiddingConfigs.Add(AdGroupDynamicBiddingConfigc);
            //    }
            //}

            if (this.Fees != null)
            {
                foreach (var costElement in GetCurrentFees())
                {
                    var costElementClone = costElement.Clone();
                    costElementClone.AdGroup = cloneObj;
                    costElementClone.FromDate = Framework.Utilities.Environment.GetServerDateHours();
                    cloneObj.Fees.Add(costElementClone);
                }
            }
            if (this.AdGroupInventorySources != null)
            {
                foreach (var invtSrc in GetAdGroupInventorySources())
                {
                    var invtSrcClone = invtSrc.CloneInventorySource();
                    invtSrcClone.AdGroup = cloneObj;
                    invtSrcClone.Campaign = campaign;
                    cloneObj.AdGroupInventorySources.Add(invtSrcClone);
                }
            }
            if (this.AdGroupBidModifiers != null)
            {

                if (cloneObj.AdGroupBidModifiers==null)
                {
                    cloneObj.AdGroupBidModifiers = new List<AdGroupBidModifier>();


                }
                foreach (var invtSrc in GetAdGroupBidModifiers())
                {
                    var invtSrcClone = invtSrc.CloneAdGroupBidModifier();
                    invtSrcClone.AdGroup = cloneObj;
                    invtSrcClone.Campaign = campaign;
                    cloneObj.AdGroupBidModifiers.Add(invtSrcClone);
                }
            }

            ClonePrerequisites(cloneObj);
            campaignRepository.Save(campaign);

            return cloneObj;
        }

        public override string ToString()
        {
            return Name;
        }

        public virtual void ClonePrerequisites(AdGroup clonedAdGroup)
        {
            var clonedTrackingEvents = clonedAdGroup.GetTrackingEvents();

            foreach (var item in this.GetTrackingEvents())
            {
                if (item.PreRequisitesList.Count != 0)
                {
                    var clonedEvent = clonedTrackingEvents.Where(p => p.Code == item.Code).SingleOrDefault();

                    var prerequisiteCodesList = GetTrackingEvents().Where(p => item.PreRequisitesList.Contains(p.ID)).Select(p => p.Code);
                    var clonedPrerequisiteCodes = clonedTrackingEvents.Where(p => prerequisiteCodesList.Contains(p.Code));

                    clonedEvent.PreRequisites = string.Join(",", clonedPrerequisiteCodes.Select(p => p.ID));
                }
            }
        }
        public virtual int GetPacingValue()
        {
            return (int)this.Pacing;

        }

        public virtual void SetPacingValue(int val)
        {

            this.Pacing = (PacingPolicies)Enum.ToObject(typeof(PacingPolicies), val);


        }

        public virtual int? GetConnectionValue()
        {
            if (this.ConnectionType != null)
                return (int)this.ConnectionType;
            else
               return  null;
        }

        public virtual void SetConnectionValue(int? val)
        {
            if (val.HasValue)
                this.ConnectionType = (TargetingConnectionType)Enum.ToObject(typeof(TargetingConnectionType), val);
            else
                this.ConnectionType = null;

        }
        public virtual void PublishAdGroupPauseEventForKafka()
        {


            //var publisher = EventPublisher.Create("events", "event.pubsub",
            //   new EventProducerConfig(Configuration.AdFalconPortalProduceKafkaServerList, "event.kafka")
            //   {
            //       ProduceBatchTimeOut = TimeSpan.FromMilliseconds(Configuration.AdFalconPortalProduceBatchTimeOutKafka)
            //   });

           // if (Configuration.KafkaEnabled)
           //Configuration.KafkaEventPublisher.Publish(new PauseAdGroupEvent { AdGroupsIds = new List<int>() { this.ID } });
        }
        public virtual void PublishAdGroupBillingInforForKafka(EntityEventData args)
        {

            if (!(args.DirtyProperties != null && args.DirtyProperties.Length > 0 && this.ID > 0))
            {
                return;
            }
            var isDirty = false;

            foreach (var item in billingInfoPropTobeNotifyed)
            {
                var index = Array.IndexOf(args.PropertyNames, item);
                isDirty = args.DirtyProperties.Contains(index);
                if (isDirty)
                {
                    break;


                }

            }
            if (isDirty)
            {
                AdGroupBillingInfoChanged adgroupChanged = new AdGroupBillingInfoChanged();

                var newadgroup= adGroupRepository.Get(this.ID);
                adgroupChanged.CampaignId = this.Campaign.ID;
                adgroupChanged.AccountId = this.Campaign.Account.ID;
                adgroupChanged.AdGroupId = this.ID;
                var index = Array.IndexOf(args.PropertyNames, "ModifiedOn");
                adgroupChanged.ModifiedOn = newadgroup.ModifiedOn;
                decimal? DataPrice = null ;
                decimal? MaxDataPrice= null;
                foreach (var item in billingInfoPropTobeNotifyed)
                {
                     index = Array.IndexOf(args.PropertyNames, item);

                    if (item == "Budget")
                    {
                        adgroupChanged.NewBudget = (decimal?)(args.State[index]);
                        adgroupChanged.OldBudget = (decimal?)(args.OldState[index]);
                    }
                    else if (item == "DailyBudget")
                    {

                        adgroupChanged.NewDailyBudget = (decimal?)(args.State[index]);
                        adgroupChanged.OldDailyBudget = (decimal?)(args.OldState[index]);
                    }
                    else if (item == "Pacing")
                    {

                        adgroupChanged.NewPacing = (PacingPolicies)(args.State[index]);
                        adgroupChanged.OldPacing = (PacingPolicies)(args.OldState[index]);

                    }
                    else if (item == "MinimumUnitPrice")
                    {
                        adgroupChanged.NewMinimumUnitPrice = (decimal)(args.State[index]) ;
                        adgroupChanged.OldMinimumUnitPrice = (decimal) (args.OldState[index]) ;


                    }
                    else if (item == "MaxDataBid")
                    {
                        MaxDataPrice = (decimal?)(args.State[index]);

                        
                       // adgroupChanged.DataPrice = (decimal)(args.OldState[index]);


                    }
                    else if ( item == "DataBid")
                    {
                        DataPrice = (decimal?)(args.State[index]);

                        
                        // adgroupChanged.DataPrice = (decimal)(args.OldState[index]);


                    }
                   
                }
                adgroupChanged.DataPrice = MaxDataPrice;
                if (DataPrice.HasValue)
                {
                    adgroupChanged.DataPrice = DataPrice;
                }
                //   var publisher = EventPublisher.Create("events", "event.pubsub",
                //new EventProducerConfig(Configuration.AdFalconPortalProduceKafkaServerList, "event.kafka")
                //{
                //    ProduceBatchTimeOut = TimeSpan.FromMilliseconds(Configuration.AdFalconPortalProduceBatchTimeOutKafka)
                //});

                if (Configuration.KafkaEnabled)
                    Configuration.KafkaEventPublisher.Publish(adgroupChanged);
            }
        }

        public virtual void testPublickEventKafka()
        {

            ArabyAds.AdFalcon.Domain.Configuration.KafkaEventPublisher.Publish(new CampaignBillingInfoChangedAck { Id = 134330, RequestedAmount=23,CommittedAmount=20});

            ArabyAds.AdFalcon.Domain.Configuration.KafkaEventPublisher.Publish(new AdGroupBillingInfoChangedAck { Id= 157358, RequestedAmount= 23, CommittedAmount =34});

            ArabyAds.AdFalcon.Domain.Configuration.KafkaEventPublisher.Publish(new  CampaignOverspend { Id= 134330, Amount=4095});



            ArabyAds.AdFalcon.Domain.Configuration.KafkaEventPublisher.Publish(new CampaignBillingInfoChangedAck { Id = 134330, RequestedAmount = 23, CommittedAmount = 20 });

            ArabyAds.AdFalcon.Domain.Configuration.KafkaEventPublisher.Publish(new AdGroupBillingInfoChangedAck { Id = 157358, RequestedAmount = 34, CommittedAmount = 34 });



            ArabyAds.AdFalcon.Domain.Configuration.KafkaEventPublisher.Publish(new CampaignBillingInfoChangedAck { Id = 134330, RequestedAmount = 3});

            ArabyAds.AdFalcon.Domain.Configuration.KafkaEventPublisher.Publish(new AdGroupBillingInfoChangedAck { Id = 157358, RequestedAmount = 34 });

            ArabyAds.AdFalcon.Domain.Configuration.KafkaEventPublisher.Publish(new CampaignBillingInfoChangedAck { Id = 134330, CommittedAmount = 20});

            ArabyAds.AdFalcon.Domain.Configuration.KafkaEventPublisher.Publish(new AdGroupBillingInfoChangedAck { Id = 157358, CommittedAmount = 34 });
        }

    }


}

