//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using ArabyAds.AdFalcon.Domain.Model.Core;
using System.Linq;
using ArabyAds.Framework;
using ArabyAds.AdFalcon.Domain.Common.Model.Campaign;

namespace ArabyAds.AdFalcon.Domain.Model.Campaign
{
    public class BannerCreative : AdCreative
    {
        private const string CustomParamValue = "1";
        public BannerCreative()
        {

            TypeId = AdTypeIds.Banner;
        }


        public override void Approve()
        {
            base.Approve();
            var ftpBaseDirectory = Configuration.FtpBaseDirectory;
            var cdnBaseUrl = Configuration.CdnBaseUrl;
            ftpUpload(ftpBaseDirectory, cdnBaseUrl);
        }
        public virtual void ftpUpload(string baseDirectory, string cdnBaseUrl)
        {
            string temp = string.Empty;
            var subFolder = string.Empty;
            if (!string.IsNullOrWhiteSpace(Group.Campaign.FolderURL))
            {
                subFolder = Group.Campaign.FolderURL;
                ApplicationContext.Instance.Logger.Info(string.Format("Campaign Folder Already Exists - AdId: {0}, CampaginID: {1}, Campaign Folder: {2}", this.ID, Group.Campaign.ID, Group.Campaign.FolderURL));
            }
            else
            {
                ApplicationContext.Instance.Logger.Info(string.Format("Campaign Folder Not Exist - AdId: {0}, CampaginID: {1}", this.ID, Group.Campaign.ID));

                //we need to create folder for it
                subFolder = Framework.Utilities.Environment.GetServerTime().ToString("yyyyMMdd");
                temp = string.Format("{0}/{1}", baseDirectory, subFolder);
                //create folder fo the current date
                Framework.Utilities.CDNHelper.CreateDirectory(temp);
                //create folder for current Campaign
                var isFolderCreated = false;
                while (!isFolderCreated)
                {
                    temp = string.Format("{0}/{1}", baseDirectory, subFolder);
                    var r = RandomNumber(1, 100000);
                    temp = string.Format("{0}/{1}", temp, r);
                    if (!Framework.Utilities.CDNHelper.DirectoryExists(temp))
                    {
                        Framework.Utilities.CDNHelper.CreateDirectory(temp);
                        isFolderCreated = true;
                        subFolder += "/" + r;

                        ApplicationContext.Instance.Logger.Info(string.Format("Campaign Folder Created - AdId: {0}, CampaginID: {1}, Campaign Folder: {2}", this.ID, Group.Campaign.ID, subFolder));
                        Group.Campaign.FolderURL = subFolder;
                    }
                }
            }
          


            if (!Framework.Utilities.CDNHelper.DirectoryExists((baseDirectory + "/" + subFolder)))
            {
                ApplicationContext.Instance.Logger.Info(string.Format("SubFolder:{0}", (baseDirectory + "/" + subFolder)));
                Framework.Utilities.CDNHelper.CreateDirectory((baseDirectory + "/" + subFolder));
            }
            // create folder for current ad if not found
            subFolder = string.Format("{0}/{1}", subFolder, uId);
            temp = string.Format("{0}/{1}", baseDirectory, subFolder);
            Framework.Utilities.CDNHelper.CreateDirectory(temp);

            var directory = string.Format("{0}/{1}", baseDirectory, subFolder);
            var cdnUrl = string.Format("{0}/{1}", cdnBaseUrl, subFolder);

            var duplicates = AdCreativeUnits.GroupBy(s => s.Document.Name.ToLower()).SelectMany(grp => grp.Skip(1));
            foreach (var adCreativeUnit in duplicates)
            {
                adCreativeUnit.Document.NewName = string.Format("{0}_{1}_{2}", adCreativeUnit.Document.GetNameWithNoExtension(),
                                                             adCreativeUnit.CreativeUnit.Width,
                                                             adCreativeUnit.CreativeUnit.Height);
            }
            IList<string> UrlList = new List<string>();
            string JoinURL = string.Empty;
            if (this.ActionValue != null)
            {
                if (this.ActionValue.Trackers != null)
                {
                    foreach (AdActionValueTracker Tracker in this.ActionValue.Trackers)
                    {
                        if (!Tracker.IsDeleted)
                            UrlList.Add("\""+ /*System.Web.HttpUtility.UrlEncode*/(Tracker.Url)+ "\"" );
                    }
                }
                /*
                if (!string.IsNullOrEmpty(adCreative.ActionValue.Value))
                {
                    UrlsListToCheck.Add(adCreative.ActionValue.Value);
                }
                if (!string.IsNullOrEmpty(adCreative.ActionValue.Value2))
                {
                    UrlsListToCheck.Add(adCreative.ActionValue.Value2);
                }*/
            }

            if (UrlList!=null && UrlList.Count>0)
            {

                JoinURL= String.Join(",", UrlList);
            }

            bool isScript = false;
            string template = string.Empty;
            foreach (var adCreativeUnit in AdCreativeUnits)
            {
                if (string.IsNullOrWhiteSpace(adCreativeUnit.Content))
                {
                    string url = adCreativeUnit.Document.ftpUpload(directory, cdnUrl);
                    adCreativeUnit.Content = url;
                    adCreativeUnit.TmpContent = url;

                }

                if (!adCreativeUnit.KeepShapshot)
                {
                    adCreativeUnit.SnapshotUrl = adCreativeUnit.Content;
                    adCreativeUnit.KeepShapshot = true;
                }

                if (adCreativeUnit.GetTrackers() != null && adCreativeUnit.GetTrackers().Where(M => M.TrackingJS != "" && M.TrackingJS != null).FirstOrDefault() != null)
                {
                    isScript = true;

                }




                    //DoJS Tracking Business
                }


          
                if (!string.IsNullOrWhiteSpace(this.GetWrapperContent()))
                {
                    isScript = true;
                }
          

            if (isScript)
            {
                foreach (var adCreativeUnit in AdCreativeUnits)
                {
                    if (string.IsNullOrEmpty(adCreativeUnit.TmpContent))
                    {
                        string url = adCreativeUnit.Document.ftpUpload(directory, cdnUrl);
                        adCreativeUnit.Content = url;
                    }
                    if (string.IsNullOrWhiteSpace(this.GetWrapperContent()))
                    {
                        template = Configuration.BannerCreativeScript;
                    }
                    else
                    {
                        template = this.GetWrapperContent();

                    }
                    this.AdSubTypeForPortal = AdSubTypes.HTML5RichMedia;
                    string impresionTrack = adCreativeUnit.GetTrackers().FirstOrDefault() != null && !string.IsNullOrEmpty(adCreativeUnit.GetTrackers().FirstOrDefault().TrackingUrl) ? "\"" +  /*System.Web.HttpUtility.UrlEncode*/(adCreativeUnit.GetTrackers().FirstOrDefault().TrackingUrl) + "\"" : string.Empty;
                    if (!string.IsNullOrEmpty(JoinURL))
                    {
                        JoinURL = ","+JoinURL;
                    }
                    if (!string.IsNullOrEmpty(impresionTrack))
                    {
                        impresionTrack = "," + impresionTrack;
                    }

                    this.TypeForPortal = adTypeRepository.Get((int)AdTypeIds.RichMedia);
                    adCreativeUnit.Content = adCreativeUnit.Content.Replace("http", "https");
                    adCreativeUnit.Content = template
                   .Replace("{BANNERURL}", adCreativeUnit.Content)
                   .Replace("{BANNERWIDTH}", adCreativeUnit.CreativeUnit.Width.ToString())
                   .Replace("{BANNERHEIGHT}", adCreativeUnit.CreativeUnit.Height.ToString())
                   .Replace("{HTTPPROT}", "https")
                   .Replace("{CLICKTRACKERURL}", JoinURL)
                   .Replace("{IMPTRACKERURL}", impresionTrack)
                   .Replace("{ACTIONURL}", (ActionValue != null && ActionValue.Value != null) ? /*System.Web.HttpUtility.UrlEncode*/(ActionValue.Value) : string.Empty)
                   .Replace("{FALLBACKURL}",string.Empty);

                    if(adCreativeUnit.GetTrackers().Where(M => M.TrackingJS != "" && M.TrackingJS != null).FirstOrDefault()!=null)
                    adCreativeUnit.Content = adCreativeUnit.Content + adCreativeUnit.GetTrackers().Where(M => M.TrackingJS != "" && M.TrackingJS != null).FirstOrDefault().TrackingJS;
                    //adCreativeUnit.Content = adCreativeUnit.Content.Replace("@{PLACEMENTTYPE}", "inline");





                }
                this.AddAdCustomParameterNotMandatory(RichMediaProtocols.MRAID1.ToString().ToLower(), CustomParamValue);
            }

        }
        public virtual void SetAllBannersUnused()
        {
            foreach (var adCreativeUnit in AdCreativeUnits)
            {
                adCreativeUnit.Document.UpdateUsage(isRemove: true);
            }
        }
        public override void ClearUnusedBanners()
        {
            var unusedItems = AdCreativeUnits.Where(item => item.Document.Usage < 1).ToList();
            foreach (var unusedItem in unusedItems)
            {
                //AdCreativeUnits.Remove(unusedItem);
                unusedItem.Delete();
            }
        }
        public override void AddCreativeUnit(AdCreativeUnit adCreativeUnit)
        {
            if (this.TypeForPortal== null ||   this.TypeForPortal.ID!=AdType.RichMedia.ID)
                 adCreativeUnit.ImageType = adCreativeUnit.Document != null ? adCreativeUnit.Document.Extension.Trim('.') : null;
            base.AddCreativeUnit(adCreativeUnit);
        }

        public override AdCreative Clone(AdGroup adGroup)
        {
            var cloneObj = base.Clone<BannerCreative>();


            foreach (var adCreativeUnit in AdCreativeUnits)
            {
                var adCreativeUnitClone = adCreativeUnit.Copy(cloneObj);
                if (adCreativeUnitClone.Document != null)
                {
                    adCreativeUnitClone.Document.UpdateUsage();
                }

                if (adCreativeUnitClone.SnapshotDocument != null)
                {
                    adCreativeUnitClone.SnapshotDocument.UpdateUsage();
                }

                cloneObj.AddCreativeUnit(adCreativeUnitClone);
            }
            return cloneObj;
        }

        public override AdCreative Clone()
        {
            return Clone(this.Group);
        }



    }
}

