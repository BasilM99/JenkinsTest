//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using ArabyAds.AdFalcon.Domain.Repositories;
using ArabyAds.AdFalcon.EventDTOs;
using ArabyAds.Framework;
using ArabyAds.Framework.DomainServices;
using System;

namespace ArabyAds.AdFalcon.Domain.Model.Account
{
    public class AccountSummary : IEntity<int>
    {
        private IAccountRepository _accountRepository = IoC.Instance.Resolve<IAccountRepository>();
        private const string _format = "{0}:{1}";
        public AccountSummary() { }
        public AccountSummary(Account account)
        {
            Account = account;
        }

        public virtual Account Account { get; protected set; }
        private int AccountId { get; set; }


        public virtual bool IsDeleted { get; set; }
        public virtual decimal FundsDelta { get; set; }
        public virtual decimal Earning { get; set; }
        public virtual decimal Credit { get; set; }
        public virtual decimal Funds { get; set; }

        public virtual decimal RoundedEarning
        {
            get { return decimal.Round(Earning, 2); }
        }

        public virtual decimal RoundedFunds
        {
            get { return decimal.Round(Funds, 2); }
        }

        public virtual decimal TotalPayments
        {
            get;
            set;
        }



        public virtual void UpdateEarning(float earning)
        {
            throw new System.NotImplementedException();
        }

        public virtual void UpdateRemainingFunds(float remainingFunds)
        {
            throw new System.NotImplementedException();
        }

        public virtual void AddToTotalFunds(decimal funds)
        {
            this.Funds += funds;
            this.FundsDelta = funds;
        }
        public virtual void UpdateTotalFunds(float totalFunds)
        {
            throw new System.NotImplementedException();
        }

        public virtual void UpdateTotalPayments(float totalPayments)
        {
            throw new System.NotImplementedException();
        }


        public virtual int ID { get; protected set; }
        public virtual string GetDescription()
        {
            return string.Format(_format, Framework.Resources.ResourceManager.Instance.GetResource("Earnings", "AccountHistory") +":"+ RoundedEarning.ToString(), Framework.Resources.ResourceManager.Instance.GetResource("Funds", "AccountHistory") + ":" +  RoundedFunds.ToString());
        }
        public virtual void PublishAccountAmountForKafka()
        {

            if (!(this.Account.ID > 0))
            {
                return;
            }
            var accountObj = _accountRepository.Get(this.Account.ID);
            //var publisher = EventPublisher.Create("events", "event.pubsub",
            //   new EventProducerConfig(Configuration.AdFalconPortalProduceKafkaServerList, "event.kafka")
            //   {
            //       ProduceBatchTimeOut = TimeSpan.FromMilliseconds(Configuration.AdFalconPortalProduceBatchTimeOutKafka)
            //   });
            var fundChanged = new FundChanged { AccountId = this.Account.ID, FundAmount = (this.Funds + this.Credit) ,FundDelta=this.FundsDelta};
            if (accountObj.Discounts != null)
            {
                var Disc = accountObj.GetActiveDiscount();
                if (Disc != null)
                {
                    fundChanged.Discount = Disc.Value;
                    fundChanged.DiscountFromDate = Disc.FromDate;
                    fundChanged.DiscountToDate = Disc.ToDate;
                    fundChanged.DiscountType = Convert.ToInt32(Disc.Type);
                }
            }


            if (Configuration.KafkaEnabled)
                Configuration.KafkaEventPublisher.Publish(fundChanged);
        }
    }
}

