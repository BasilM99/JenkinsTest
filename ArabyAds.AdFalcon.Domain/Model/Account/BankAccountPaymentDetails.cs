//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using ArabyAds.Framework.DomainServices;
using ArabyAds.Framework.ExceptionHandling.Exceptions;

namespace ArabyAds.AdFalcon.Domain.Model.Account
{
    public class BankAccountPaymentDetails : AccountPaymentDetails
    {
        public virtual string BeneficiaryName { get; set; }
        public virtual string BankName { get; set; }
        public virtual string BankAddress { get; set; }
        public virtual string RecipientAccountNumber { get; set; }
        public virtual string SWIFT { get; set; }

        public override IList<ErrorData>GetValidateErrors()
        {
            var result = new List<ErrorData>();
            if (string.IsNullOrWhiteSpace(BeneficiaryName))
            {
                result.Add(new ErrorData { ID = "BeneficiaryNameBR" });
                IsValid = false;
            }
            return result;
        }
        public override void Validate(bool checkEmpty = false)
        {
            var error = new BusinessException();
            IsValid = true;
            IsHasValue = !string.IsNullOrWhiteSpace(BeneficiaryName) ||
                       !string.IsNullOrWhiteSpace(BankName) ||
                       !string.IsNullOrWhiteSpace(BankAddress) ||
                       !string.IsNullOrWhiteSpace(RecipientAccountNumber) ||
                       !string.IsNullOrWhiteSpace(SWIFT);


            if ((IsHasValue)||(checkEmpty))
            {
                if (string.IsNullOrWhiteSpace(BankName))
                {
                    error.Errors.Add(new ErrorData {ID = "BankNameBR"});
                    IsValid = false;
                }
                if (string.IsNullOrWhiteSpace(BeneficiaryName))
                {
                    error.Errors.Add(new ErrorData { ID = "BeneficiaryNameBR" });
                    IsValid = false;
                }
                if (string.IsNullOrWhiteSpace(BankAddress))
                {
                    error.Errors.Add(new ErrorData { ID = "BankAddressBR" });
                    IsValid = false;
                }
                if (string.IsNullOrWhiteSpace(RecipientAccountNumber))
                {
                    error.Errors.Add(new ErrorData { ID = "RecipientAccountNumberBR" });
                    IsValid = false;
                }
               /* if (string.IsNullOrWhiteSpace(SWIFT))
                {
                    error.Errors.Add(new ErrorData { ID = "SWIFTBR" });
                    IsValid = false;
                }*/
                if (error.Errors.Count > 0)
                    throw error;
            }
            else
            {
                IsValid = false;
            }
        }
        public override string GetDescription()
        {
            return string.Format("{0}-{1}-{2}", BankName, RecipientAccountNumber,BeneficiaryName);
        }
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != typeof(BankAccountPaymentDetails)) return false;
            return Equals((BankAccountPaymentDetails)obj);
        }

        public virtual bool Equals(BankAccountPaymentDetails other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;
            return Equals(other.BeneficiaryName, BeneficiaryName) && Equals(other.BankName, BankName) && Equals(other.BankAddress, BankAddress) && Equals(other.RecipientAccountNumber, RecipientAccountNumber) && Equals(other.SWIFT, SWIFT);
        }

        public override int GetHashCode()
        {
            unchecked
            {
                int result = (BeneficiaryName != null ? BeneficiaryName.GetHashCode() : 0);
                result = (result * 397) ^ (BankName != null ? BankName.GetHashCode() : 0);
                result = (result * 397) ^ (BankAddress != null ? BankAddress.GetHashCode() : 0);
                result = (result * 397) ^ (RecipientAccountNumber != null ? RecipientAccountNumber.GetHashCode() : 0);
                result = (result * 397) ^ (SWIFT != null ? SWIFT.GetHashCode() : 0);
                return result;
            }
        }
    }
}

