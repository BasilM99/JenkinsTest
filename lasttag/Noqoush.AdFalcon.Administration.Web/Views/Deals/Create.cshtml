@{
    bool AllowGlobalization = ViewData["AllowGlobalization"] != null ? Convert.ToBoolean(ViewData["AllowGlobalization"]) : false;

    ViewBag.Title = Noqoush.AdFalcon.Web.Controllers.Utilities.Config.IsAdmin && AllowGlobalization ? Html.GetResource("GlobalDeal", "Deal") : Html.GetResource("Deal", "PMPDeal");
}
@using Noqoush.AdFalcon.Web.Controllers.Model.Core
@using Noqoush.AdFalcon.Web.Controllers.Utilities
@*@using Noqoush.Framework.DomainServices*@
@model Noqoush.AdFalcon.Services.Interfaces.DTOs.Account.PMP.PMPDealDto
@using Noqoush.AdFalcon.Web.Controllers.Model;

@{
        var ExchangeSelect2Dll = new Select2ViewModel
        {
            Id = "ExchangeListDllCreateDeal",
            ActionName = "_IndexNoHttpsSelect2Object",
            ControllerName = "Party",
            ClintSideResourceFunction = "",
            IsServerSide = true,
            OptionalParameter = "",
            IsTree = true,
            Single = true,
            PlaceHolder = Html.GetResource("SelectExchangeT", "PMPDeal"),
            //OnSelectFunctions = "FixCountriesTree",
            //OnReadyFunctions= "FixCountriesLimit"
            ParameterObject = new { language = "en", SSpartyGrid_size = "20", Prefix = "", id = "ssppartner" },
            AllowClear = true
    };
}

<style>
	#ExchangeListDllCreateDealDiv {
	
	display:inline-block;
	}

</style>
<script language="javascript" type="text/javascript">
    @{
        var mindate = 0;
        if (Model != null && Model.StartDate!=null)
        {
            var snb = ((DateTime)Model.StartDate).Subtract(Noqoush.Framework.Utilities.Environment.GetServerTime());
            if (snb.TotalDays < 0)
            {
                mindate = Convert.ToInt32(snb.TotalDays) - 1;
            }
        }


    }
    var startDateBeforeNowBRMsg = '@Html.GetResource("CampaignStartDateBeforeNowBR")';
    var endDateBeforeNowBRMsg = '@Html.GetResource("CampaignEndDateBR")';
    var endDateBeforeStartDateBRMsg = '@Html.GetResource("CampaignEndDateBeforeEndDateBR")';
    var re = /[0-9]+$/;
    var ListOfGehraichs ='@(Model!=null && Model.PMPTargetingSaveDto!=null && Model.PMPTargetingSaveDto.Geographies != null && Model.PMPTargetingSaveDto.Geographies.Count>0? string.Join(",", (int[])Model.PMPTargetingSaveDto.Geographies ):string.Empty)' ;
    var ListOfAdSizes ='@(Model != null && Model.PMPTargetingSaveDto != null && Model.PMPTargetingSaveDto.AdSizes != null && Model.PMPTargetingSaveDto.AdSizes.Count > 0 ? string.Join(",", (int[])Model.PMPTargetingSaveDto.AdSizes ):string.Empty)' ;
    var SSPCheckedIDs = "";
    GlobalAdvertiserId = '@(Model!=null ?Model.AdvertiserId:0)';
	    GlobalAdvertiserAccountId = '@(Model!=null ?Model.AdvertiserAccountId : 0)';
    $(document).ready(function (){

		var setting = $.data($("form:not(#SwitchAccountForm)")[0], 'validator').settings;

        setting.ignore = '.ValdationIgnored';
        $('.multiselect2jq').select2();
        //$(".js-example-theme-single").select2({
        //    theme: "classic"
        //});

        //$(".js-example-theme-multiple").select2({
        //    theme: "classic"
        //});


        //$("[class='select2-results__option']").attr("style", "float: left;");
        localInitilize();

        SetSelectedTap("ListMenuAdvertiser");

        InitializeAdFormatChange();
        onAdFormatChange();

        generatePartyGridPMP();

        if('@AllowGlobalization'=="True")
        {
            check("IsGlobal");
        }


        $("#ExchangeListDllCreateDealList").on('select2:select', function (e) {
            let ddlElemnt = $("#ExchangeListDllCreateDealList");
            let ExchangeListDllCreateDealList_Value = ddlElemnt.val();
            let data = ddlElemnt.select2('data');

            if ($("#ExchangeId").val() != ExchangeListDllCreateDealList_Value) {

				if (ExchangeListDllCreateDealList_Value != null && (typeof (ExchangeListDllCreateDealList_Value) != "undefined") && ExchangeListDllCreateDealList_Value != "") {
					jQuery('[name="ExchangeId"]').val(ExchangeListDllCreateDealList_Value);

					$("#ExchangeIdSpanVal").hide();
				}
				else {
					
					jQuery('[name="ExchangeId"]').val(null);

					$("#ExchangeIdSpanVal").show();
				}
                if (data.length > 0)
                    jQuery('[name="ExchangeName"]').val(data[0].text);
            }
        })
		var isInitlized = false;
        $("#ExchangeListDllCreateDealList").on('change', function (e) {
            let ddlElemnt = $("#ExchangeListDllCreateDealList");
			let ExchangeListDllCreateDealList_Value = ddlElemnt.val();
			if (ddlElemnt[0].childElementCount == 0) {
				setTimeout(function () {
					console.log("wait Select2 initialization");
					if ($("#ExchangeId").val() != undefined && $("#ExchangeId").val() != '')
						$("#ExchangeListDllCreateDealList").val($("#ExchangeId").val()).trigger('change');
				}, 1000);

			}
			else {


				if (isInitlized && !(ExchangeListDllCreateDealList_Value != null && (typeof (ExchangeListDllCreateDealList_Value) != "undefined") && ExchangeListDllCreateDealList_Value != "")) {


					jQuery('[name="ExchangeId"]').val(null);

					$("#ExchangeIdSpanVal").show();
				}
				else {

					isInitlized = true;
				}
                return;
            }
        })

    });
    
    var startDateChanged = false;
    function onPriceChange(sender) {


        var value = $(sender).val();
        var REGULAR = new RegExp("^\\d{1,5}(\\.\\d{1,3})?$");

        if (!REGULAR.test(value)) {
            $(sender).val("");

        }
    }
    function localInitilize() {

        var dates = jQuery("#StartDate,#EndDate").datepicker({
            changeMonth: true,
            showButtonPanel: true,
            showOn: 'both',
            minDate: @mindate,
            buttonImageOnly: true,
            dateFormat: 'dd-mm-yy',
            buttonImage: '@(Url.GetImagePath("Calendar-icon.png"))',
            isRTL: false,
            onSelect: function (selectedDate) {
                if (this.id == "StartDate") {
                    startDateChanged = true;
                    $(this).valid();
                }
                var option = this.id == "StartDate" ? "minDate" : "maxDate",
                    instance = $(this).data("datepicker"),
                    date = $.datepicker.parseDate(instance.settings.dateFormat || $.datepicker._defaults.dateFormat, selectedDate, instance.settings);
                dates.not(this).datepicker("option", option, date);
            }
        });

        //jQuery("#party-search-dialog-form").dialog({
        //    autoOpen: false,
        //    //height: 450,
        //    width: 700,
        //    modal: true,
        //    resizable: false,
        //    draggable: false
        //});

        $("#account-search-dialog-form").dialog({
            autoOpen: false,
            //  height: 460,
            width: 900,
            modal: true,
            resizable: false,
            draggable: false,
            open: function () {



            },
            close: function () {

                $("#account-search-dialog-form ,#AccountSearchName ,#CompanyName,#Email").val('');
                // generateUsersGrid();

            }
		});
        if ($("#ExchangeId").val() != undefined && $("#ExchangeId").val() != '')
            $("#ExchangeListDllCreateDealList").val($("#ExchangeId").val()).trigger('change');
		//$("#ExchangeNameSpan").val("Click To Select Exchange");

    }

    function customDealValidate() {
        var result = true;
        clearErrorMessage();
		result = $("form:not(#SwitchAccountForm)").valid();
        result = validateDate() && result;


		if (result)
		{
			count = 0;
		}




        return result;
    };
    function validateDate() {
        var result = true;

        var date_now = new Date();
        var startDate = tempDate = jQuery("#StartDate").datepicker('getDate');
        var endDate = jQuery("#EndDate").datepicker('getDate');



        var now = new Date();
        now.setHours(0, 0, 0, 0);
        //reset dates
        if (startDate != null) {
            startDate.setHours(0, 0, 0, 0);
        }
        if (endDate != null) {
            endDate.setHours(23, 59, 59, 0);
        }
        //check if the client changed the start date
        //check is start date is less than the current date
        if ((startDateChanged) && (startDate != null) && (startDate < now)) {
            showErrorMessage(startDateBeforeNowBRMsg, true);
            result = false;
        }
        //check is end date is less than the current date
        if ((endDate != null) && (endDate < now)) {
            showErrorMessage(endDateBeforeNowBRMsg, true);
            result = false;
        }

        //check is end date is less than the start date
        if ((endDate != null) && (startDate > endDate)) {
            showErrorMessage(endDateBeforeStartDateBRMsg, true);
            result = false;
        }
        return result;
    };
    function onAdFormatChange()
    {
        var types= '';
        var checked = false;
        if(typeof($("#AdFormatBanner").attr("checked")) != 'undefined' && $("#AdFormatBanner").attr("checked")=="checked")
        {
            types+='@Convert.ToInt32(Noqoush.AdFalcon.Domain.Common.Model.Campaign.AdTypeGroup.Banner)'+",";
            checked = true;
        }

        if(typeof($("#AdFormatNative").attr("checked")) != 'undefined' && $("#AdFormatNative").attr("checked")=="checked")
        {
            types+='@Convert.ToInt32(Noqoush.AdFalcon.Domain.Common.Model.Campaign.AdTypeGroup.Native)'+",";
            checked = true;

        }

        if(typeof($("#AdFormatInStream").attr("checked")) != 'undefined' && $("#AdFormatInStream").attr("checked")=="checked")
        {
            types+='@Convert.ToInt32(Noqoush.AdFalcon.Domain.Common.Model.Campaign.AdTypeGroup.InStream)';
            checked = true;

        }

        if(checked)
        {
            $('#PMPTargetingSaveDto_AdSizes').select2("enable",'true');


        }else
        {

            $('#PMPTargetingSaveDto_AdSizes').select2("enable",false);

        }
        $("#PMPTargetingSaveDto_RawAdFormats").val(types);
        fillTree(types);


    }

    function InitializeAdFormatChange()
    {
        var types= '';

        if(typeof($("#AdFormatBanner").attr("checked")) != 'undefined' && $("#AdFormatBanner").attr("checked")=="checked")
        {
            types+='@Convert.ToInt32(Noqoush.AdFalcon.Domain.Common.Model.Campaign.AdTypeGroup.Banner)'+",";
        }

        if(typeof($("#AdFormatNative").attr("checked")) != 'undefined' && $("#AdFormatNative").attr("checked")=="checked")
        {
            types+='@Convert.ToInt32(Noqoush.AdFalcon.Domain.Common.Model.Campaign.AdTypeGroup.Native)'+",";
        }

        if(typeof($("#AdFormatInStream").attr("checked")) != 'undefined' && $("#AdFormatInStream").attr("checked")=="checked")
        {
            types+='@Convert.ToInt32(Noqoush.AdFalcon.Domain.Common.Model.Campaign.AdTypeGroup.InStream)';
        }
        // $("#PMPTargetingSaveDto_RawAdFormats").val(types);
        fillTree(types);


    }
    var Partyurl = '@Url.Action("SSPSearch", "Party")';
    function refreshPartyGrid()
    {


        $.ajax(
           {
               url: Partyurl,
               cache: false,
               success: function (html) {


                   html = html.toString();
                   $("#party-search-dialog-form").html('');
                   var newelem = jQuery(html);
                   $("#party-search-dialog-form").append(newelem);
                   parseScript(html);
                   initilize();
                   showDialog('party-search-dialog-form');

               },
               error: function (error) {

               }
           });
    }

    var Accounturl = '@Url.Action("nohttpsPublisherAccountSearch", "User")';

    function refreshAccountGrid()
    {


        $.ajax(
           {
               url: Accounturl,
               cache: false,
               success: function (html) {


                   html = html.toString();
                   $("#account-search-dialog-form").html('');
                   var newelem = jQuery(html);
                   $("#account-search-dialog-form").append(newelem);
                   parseScript(html);
                   initilize();
                   showDialog('account-search-dialog-form');

               },
               error: function (error) {

               }
           });
    }


    function showPartySearchDialog() {

        //  refreshPartyGrid();

        showDialog('party-search-dialog-form');
        $("#SSPPartyName").val('');
        generatePartyGridPMP();

    }
    function AccountDialogInitilize() {

    }

    function showAccountSearchDialog() {
        //AccountDialogInitilize();
        //refreshAccountGrid();
        generateUsersGridForPuplisher();
        showDialog('account-search-dialog-form');
    }

    

    //function changePartyExchange(partytId, partyDesc) {

    //    if ((typeof (partytId) != "undefined") && (typeof (partyDesc) != "undefined")) {
    //        jQuery('#ExchangeName').text(partyDesc);
    //        jQuery('[name="ExchangeName"]').val(partyDesc);
    //        jQuery('#ExchangeNameSpan').text(partyDesc);
    //        jQuery('#ExchangeNameSpan').val(partyDesc);
    //        jQuery('[name="ExchangeId"]').val(partytId);
    //        jQuery('#ExchangeIdSpanVal').hide();
    //    }
    //    jQuery('#party-search-dialog-form').dialog('close');
    //}
    function changeAccount(accpartytId, accpartyDesc) {

        if ((typeof (accpartytId) != "undefined") && (typeof (accpartyDesc) != "undefined")) {
            jQuery('#PublisherName').text(accpartyDesc);
            jQuery('#PublisherNameSpan').text(accpartyDesc);
            jQuery('#PublisherNameSpan').val(accpartyDesc);
            jQuery('[name="PublisherId"]').val(accpartytId);
            jQuery('[name="PublisherName"]').val(accpartyDesc);
            jQuery('#PublisherIdSpanVal').hide();
        }
        jQuery('#account-search-dialog-form').dialog('close');
    }
</script>
@using (Html.BeginForm())
{

    <div class="data-row section-container">
        <br />
		<div class="data-row section-container">


			<h2>@Html.GetResource("DealInfo", "PMPDeal")</h2>
			@Html.HiddenFor(p => p.PMPTargetingSaveDto.RawAdFormats)

			<div class="section-form-container">
				<div class="section-form-inner-container">
					<div class="data-row data-container">
						<div class="label-container">
							<span class="field-title required-field">@Html.GetResource("Name", "Global")</span>
						</div>
						<div class="field-container">
							@Html.AdFalconEditorFor(p => p.Name)
							<span style="display: inline-block; margin-left: 45px; margin-right: 45px;">@Html.AdFalconValidationMessageFor(p => p.Name)</span>
						</div>
					</div>

					<div class="data-row data-container">
						<div class="label-container">
							<span class="field-title required-field">@Html.GetResource("DealID", "PMPDeal")</span>
						</div>
						<div class="field-container">
							@Html.AdFalconEditorFor(p => p.DealID)
							<span style="display: inline-block; margin-left: 45px; margin-right: 45px;">@Html.AdFalconValidationMessageFor(p => p.DealID)</span>
						</div>
					</div>



					<div class="data-row data-container">
						<div class="label-container">
							<span class="field-title required-field">@Html.GetResource("Price", "SSPFloorPrices")</span>
						</div>
						<div class="field-container">
							@Html.AdFalconTextBox("Price", Model == null ? string.Empty : Model.Price.Value.ToString("F2"), new { @class = "required", maskType = "decimal", onchange = "onPriceChange(this);", onkeypress = "onbidpress(event,this); " })

							<span class="side-text">$</span><span style="display: inline-block; margin-left:32px; margin-right: 32px;">@Html.AdFalconValidationMessageFor(p => p.Price)</span>
						</div>
					</div>



					<div class="data-row data-container">
						<div class="label-container">
							<span class="field-title ">@Html.GetResource("Type", "Global") </span>
						</div>
						<div class="field-container">
							@{
								bool selected = false;

								if (Model == null || (Model != null && Model.Type == Noqoush.AdFalcon.Domain.Common.Model.Account.PMP.DealType.PrivateAuction))
								{
									selected = true;
								}


							}
							@Html.GetRadioButton("Type", Noqoush.AdFalcon.Domain.Common.Model.Account.PMP.DealType.PrivateAuction.ToText(), @selected, "floating-left iea-rbtn-width-b", value: ((int)Noqoush.AdFalcon.Domain.Common.Model.Account.PMP.DealType.PrivateAuction).ToString())

							@{
								selected = false;

								if (Model != null && Model.Type == Noqoush.AdFalcon.Domain.Common.Model.Account.PMP.DealType.Fixed)
								{
									selected = true;
								}
							}
							@Html.GetRadioButton("Type", Noqoush.AdFalcon.Domain.Common.Model.Account.PMP.DealType.Fixed.ToText(), @selected, "floating-left iea-rbtn-width-b", value: ((int)Noqoush.AdFalcon.Domain.Common.Model.Account.PMP.DealType.Fixed).ToString())
						</div>
					</div>
					<div class="data-row data-container">
						<div class="label-container">
							<span class="field-title required-field">@Html.GetResource("Exchange", "PMPDeal")</span>
						</div>
						<div class="field-container">
							@Html.Partial("Select2Dynamic", ExchangeSelect2Dll)

							@Html.HiddenFor(p => p.ExchangeId, new { id = "ExchangeId" })
							@Html.HiddenFor(p => p.ExchangeName)
							@*<div onclick="showPartySearchDialog();" style="line-height: 24px;">
						@Html.HiddenFor(p => p.ExchangeId, new { id = "ExchangeId" })
						@Html.HiddenFor(p => p.ExchangeName)
						@Html.AdFalconTextBoxFor(p => p.ExchangeName, new { id = "ExchangeNameSpan", disabled = "true" })
						<img class="find-icon" src='@Url.GetImagePath("find-icon.png")' />
						@Html.Partial("MoreInfo", "SelectOneItemDescription", new ViewDataDictionary { { "Class_Tail", "tail-report" }, { "Style2", "width: 350px; float:none;" } })*@

							@*<span class="side-text" id="ExchangeNameSpan" style="/*float: none;*/">@(Model != null ? Model.ExchangeName : string.Empty)</span>*@
							<span id="ExchangeIdSpanVal" style="display: inline-block; margin-left: 47px; margin-right: 47px;">
								@Html.AdFalconValidationMessageFor(m => m.ExchangeId)
							</span>
							@*</div>*@
						</div>
					</div>
					<div class="data-row data-container">
						<div class="label-container">
							<span class="field-title required-field">@Html.GetResource("PublisherName", "PMPDeals")</span>
						</div>
						<div class="field-container">
							@Html.AdFalconEditorFor(p => p.PublisherName)
							<span style="display: inline-block; margin-left: 45px; margin-right: 45px;">@Html.AdFalconValidationMessageFor(p => p.PublisherName)</span>
						</div>
					</div>
					@*<div class="data-row data-container">
					<div class="label-container">
						<span class="field-title required-field">@Html.GetResource("Publisher", "Menu")</span>
					</div>
					<div class="field-container">
						<div onclick="showAccountSearchDialog();" style="line-height: 24px;">
							@Html.HiddenFor(p => p.PublisherId, new { id = "PublisherId" })
							@Html.HiddenFor(p => p.PublisherName)
							@Html.AdFalconTextBoxFor(p => p.PublisherName, new { id = "PublisherNameSpan", disabled = "true" })
							<img class="find-icon" src='@Url.GetImagePath("find-icon.png")' />


							<span id="PublisherIdSpanVal" style="display: inline-block; margin-left: 45px; margin-right: 45px;">
								@Html.AdFalconValidationMessageFor(m => m.PublisherId)
							</span>
						</div>
					</div>
				</div>*@
					@{
						if (Noqoush.AdFalcon.Web.Controllers.Utilities.Config.IsAdmin && AllowGlobalization)
						{
							<div class="data-row data-container" style="display:none;">
								<div class="label-container">
									<span class="field-title required-field">&nbsp;</span>
								</div>
								<div class="field-container">
									@Html.GetCheckBox("IsGlobal", Html.GetResource("IsGlobal", "Global"), Model == null ? false : Model.IsGlobal, onChange: "")


								</div>
							</div>
						}
						else if(Noqoush.AdFalcon.Web.Controllers.Utilities.Config.IsAdmin)
						{
						
						<div class="data-row data-container">
								<div class="label-container">
									<span class="field-title required-field">&nbsp;</span>
								</div>
								<div class="field-container">
									@Html.GetCheckBox("IsGlobal", Html.GetResource("IsGlobal", "Global"), Model == null ? false : Model.IsGlobal, onChange: "")


								</div>
							</div>
						
						}
					}
				</div>
			</div>

			<h2>@Html.GetResource("Details", "Report")</h2>
			<div class="section-form-container">
				<div class="section-form-inner-container">
					<div class="data-row data-container">
						<div class="label-container">
							<span class="field-title">
								@Html.GetResource("StartDate", "Campaign")
							</span>
						</div>
						<div class="field-container">
							@Html.AdFalconTextBox("StartDate", Model != null && Model.StartDate != null ? ((DateTime)Model.StartDate).ToString(Noqoush.AdFalcon.Web.Controllers.Utilities.Config.MainShortDateFormat) : Noqoush.Framework.Utilities.Environment.GetServerTime().ToString(Noqoush.AdFalcon.Web.Controllers.Utilities.Config.MainShortDateFormat), new { @readonly = "readonly" })
						</div>
					</div>
					<div class="data-row data-container">
						<div class="label-container">
							<span class="field-title">@Html.GetResource("EndDate", "Campaign")</span>
						</div>
						<div class="field-container">
							@Html.AdFalconTextBox("EndDate", Model != null && Model.EndDate.HasValue ? Model.EndDate.Value.ToString(Noqoush.AdFalcon.Web.Controllers.Utilities.Config.MainShortDateFormat) : "", new { @readonly = "readonly" })
						</div>
					</div>
					<div class="data-row data-container">
						<div class="label-container">
							<span class="field-title">@Html.GetResource("Description", "Campaign") </span>
						</div>
						<div class="field-container">
							@Html.TextAreaFor(p => p.Description, new { @class = "text-box", rows = 4, cols = 5 })
							@Html.AdFalconValidationMessageFor(p => p.Description)
						</div>
					</div>


					<div class="data-row data-container">
						<div class="label-container">
							<span class="field-title ">@Html.GetResource("Note", "Campaign") </span>
						</div>
						<div class="field-container">
							@Html.TextAreaFor(p => p.Note, new { @class = "text-box", rows = 4, cols = 5 })
							@Html.AdFalconValidationMessageFor(p => p.Note)
						</div>
					</div>
				</div>
			</div>
			<h2>@Html.GetResource("Targeting", "Titles")</h2>
			<div class="section-form-container" id="targetingContainer">
				<div class="section-form-inner-container">
					<div class="data-row data-container">
						<div class="label-container">
							<span class="field-title">@Html.GetResource("Country", "Global")</span>
						</div>
						<div class="field-container">
							@Html.Partial("CountriesTree")
						</div>
					</div>


					<div class="data-row data-container">
						<div class="label-container">
							<span class="field-title"> @Html.GetResource("AdFormat", "PMPDeal")</span>
						</div>
						<div class="field-container">
							@{
								selected = false;

								if (Model != null && Model.PMPTargetingSaveDto != null && Model.PMPTargetingSaveDto.AdFormats != null && Model.PMPTargetingSaveDto.AdFormats.Where(x => x == (int)Noqoush.AdFalcon.Domain.Common.Model.Campaign.AdTypeGroup.Banner).Count() > 0)
								{
									selected = true;
								}


							}
							@Html.GetCheckBox("AdFormatBanner", Noqoush.AdFalcon.Domain.Common.Model.Campaign.AdTypeGroup.Banner.ToText(), @selected, onChange: "onAdFormatChange", customValue: ((int)Noqoush.AdFalcon.Domain.Common.Model.Campaign.AdTypeGroup.Banner).ToString())

							@{
								selected = false;

								if (Model != null && Model.PMPTargetingSaveDto != null && Model.PMPTargetingSaveDto.AdFormats != null && Model.PMPTargetingSaveDto.AdFormats.Where(x => x == (int)Noqoush.AdFalcon.Domain.Common.Model.Campaign.AdTypeGroup.InStream).Count() > 0)
								{
									selected = true;
								}


							}
							@Html.GetCheckBox("AdFormatInStream", Noqoush.AdFalcon.Domain.Common.Model.Campaign.AdTypeGroup.InStream.ToText(), @selected, onChange: "onAdFormatChange", customValue: ((int)Noqoush.AdFalcon.Domain.Common.Model.Campaign.AdTypeGroup.InStream).ToString())
							@{
								selected = false;

								if (Model != null && Model.PMPTargetingSaveDto != null && Model.PMPTargetingSaveDto.AdFormats != null && Model.PMPTargetingSaveDto.AdFormats.Where(x => x == (int)Noqoush.AdFalcon.Domain.Common.Model.Campaign.AdTypeGroup.Native).Count() > 0)
								{
									selected = true;
								}


							}
							@Html.GetCheckBox("AdFormatNative", Noqoush.AdFalcon.Domain.Common.Model.Campaign.AdTypeGroup.Native.ToText(), @selected, onChange: "onAdFormatChange", customValue: ((int)Noqoush.AdFalcon.Domain.Common.Model.Campaign.AdTypeGroup.Native).ToString())




						</div>
					</div>

					<div class="data-row data-container">
						<div class="label-container">
							<span class="field-title">@Html.GetResource("AdSize", "PMPDealTargetings")</span>
						</div>


						<div class="field-container">
							@Html.Partial("Tree")

						</div>
						<div class="field-container">
							&nbsp;     &nbsp;
						</div>                            @*<div class="field-container">
						@Html.Partial("MoreInfo", "AdSizeMoreInfo")
					</div>*@
					</div>
				</div>
			</div>
			<div class="section-footer">
			</div>
		</div>
		<div class="data-row button-container">
			@if (Model == null || !(Model.IsLocked || Model.IsReadOnly))
				{
					@Html.SubmitButton(@Html.GetResource("Save", "Commands"), "Create", new { @class = "primary-btn", onclick = "customDealValidate();" })
			}

     

            <input type="button" value='@Html.GetResource("Close", "Commands")' class="btn" onclick="redirect('@(string.IsNullOrWhiteSpace(Request.QueryString["returnUrl"]) ? Url.Action("Index", "Deals", new { id = this.ViewContext.RouteData.Values["AdvertiseraccId"], AllowGlobalization=Request.QueryString["AllowGlobalization"] }) : Request.QueryString["returnUrl"])')" />
        </div>

        <div id="account-search-dialog-form" style="display: none;" title="@Html.GetResource("Publisher", "Menu")">
            @Html.Action("nohttpsPublisherAccountSearch", "User")

        </div>
        <div id="party-search-dialog-form" title="@Html.GetResource("SelectExchangeT", "PMPDeal")" style="display: none; ">

            @Html.Action("SSPSearch", "Party")
        </div>

    </div>



}


