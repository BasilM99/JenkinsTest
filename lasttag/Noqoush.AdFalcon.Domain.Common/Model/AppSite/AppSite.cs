//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using Noqoush.AdFalcon.Business.Domain.Exceptions;
using Noqoush.AdFalcon.Domain.Model.AppSite.Filtering;
using Noqoush.AdFalcon.Domain.Model.Campaign;
using Noqoush.AdFalcon.Domain.Model.Core;
using Noqoush.AdFalcon.Exceptions;
using Noqoush.AdFalcon.Exceptions.Core;
using Noqoush.Framework;
using Noqoush.Framework.DomainServices;
using Noqoush.Framework.Security;
using Noqoush.Framework.DataAnnotations;
namespace Noqoush.AdFalcon.Domain.Model.AppSite
{
    public class AppSite : IEntity<int>
    {
        private const string splitter = "*##*";

        public AppSite()
        {
            AppSiteFilters = new List<AppSiteFilter>();
            Keywords = new List<AppSiteKeyword>();
        }

        public virtual int ID { get; set; }
        public virtual bool IsDeleted { get; set; }
        [Required]
        [StringLength(255)]
        public virtual string Name { get; set; }
        public virtual string PublisherId { get; set; }
        [StringLength(1024)]
        public virtual string Description { get; set; }
        public virtual DateTime RegistrationDate { get; set; }
        public virtual AppSiteStatus Status { get; set; }
        public virtual AppSiteType Type { get; set; }
        public virtual TextAdTheme Theme { get; set; }
        public virtual Account.Account Account { get; set; }
        private string _NameLower;

        public virtual string NameLower { get { return _NameLower; } set { _NameLower = !string.IsNullOrEmpty(Name) ? Name.Trim().ToLower() : ""; } }

        public virtual Account.User User { get; set; }
        public virtual AppSiteFilterSet AppSiteFilterSet { get; set; }
        public virtual AppSiteSetting AppSiteSetting { get; set; }
        public virtual AppSiteServerSetting AppSiteServerSetting { get; set; }

        public virtual IList<AppSiteKeyword> Keywords { get; set; }

        public virtual IList<AppSiteFilter> AppSiteFilters { get; set; }
        public virtual IList<AppSiteRevenueCalculationSetting> RevenueCalculationSettings { get; set; }

        public virtual IList<HouseAd> HouseAds { get; set; }
        public virtual IList<SubAppsite> SubAppsites { get; set; }

        public virtual string GetURL()
        {
            return string.Empty;
        }
        public virtual bool IsApp { get; set; }
        public virtual bool IsValid { get; set; }
        public virtual bool IsPublished { get; set; }
        public virtual string AdminComments { get; set; }
        public virtual string LastAdminComment
        {
            get
            {
                if (string.IsNullOrWhiteSpace(AdminComments))
                    return string.Empty;
                var comments = AdminComments.Split(new string[] { splitter }, StringSplitOptions.RemoveEmptyEntries);//Regex.Split(splitter, AdminComments);
                return comments.LastOrDefault();
            }
        }
        public virtual bool ChangeType(AppSite appsite, AppSiteType appSiteType)
        {
            this.Type = appSiteType;
            return true;
        }

        public virtual void AddKeyword(Keyword keyword)
        {
            AppSiteKeyword appSiteKeyword = new AppSiteKeyword(this);

      
            appSiteKeyword.Keyword = keyword;
            AppSiteKeyword appSiteKeywordexist = Keywords.Where(p => p.Keyword.ID == keyword.ID).SingleOrDefault();

            if(appSiteKeywordexist==null)
            Keywords.Add(appSiteKeyword);
        }
        public virtual void RemoveKeyword(Keyword keyword)
        {
            AppSiteKeyword appSiteKeyword = Keywords.Where(p => p.Keyword.ID == keyword.ID).SingleOrDefault();

            if (appSiteKeyword != null)
            {
                Keywords.Remove(appSiteKeyword);

            }
        }

        public virtual void ChangeTheme(TextAdTheme theme)
        {
            this.Theme = theme;

        }
        public virtual void ChangePlacementType(string RewardedName, int? RewardedValue, int PlacementTypeId)
        {
            
            this.AppSiteServerSetting.RewardedVideoItemName = RewardedName;
            this.AppSiteServerSetting.RewardedVideoItemValue = RewardedValue;
            this.AppSiteServerSetting.AppSitePlacementType =  (AppSitePlacementType)PlacementTypeId ;
        }
        public virtual void AddDefaultAppSiteSetting()
        {
            if (this.AppSiteServerSetting == null)
            {
                AppSiteServerSetting defaultAppSiteServerSetting = new AppSiteServerSetting(this) { AllowBlindAds = true, GenerateSystemUniqueId = true };
                this.AppSiteServerSetting = defaultAppSiteServerSetting;
            }

            if (this.AppSiteSetting == null)
            {
                AppSiteSetting defaultSetting = new AppSiteSetting(this) { RefreshModeId = 1, RefreshInterval = 0, TestingModeId = 1 };
                this.AppSiteSetting = defaultSetting;
            }
        }

        public virtual void ChangeSetting(AppSiteSetting appSiteSetting)
        {
            if (this.AppSiteSetting == null)
            {
                this.AppSiteSetting = new AppSiteSetting(this);
            }

            this.AppSiteSetting.TestingModeId = appSiteSetting.TestingModeId;
            this.AppSiteSetting.RefreshInterval = appSiteSetting.RefreshInterval;
            this.AppSiteSetting.RefreshModeId = appSiteSetting.RefreshModeId;

        }

        public virtual void ChangeUser(Account.User user)
        {
            if (this.User == null)
            {
                this.User = user;
            }
        }
        public virtual void ChangeAccount(Account.Account account)
        {
            if (this.Account == null)
            {
                this.Account = account;
            }
        }
        public virtual bool Approve(AppSiteStatus status, string comments)
        {
            if (Status.ID != status.ID)
            {
                Status = status;
                if (!LastAdminComment.Equals(comments, StringComparison.OrdinalIgnoreCase))
                {
                    AdminComments = comments;
                }
                return true;
            }
            return false;
        }

        public virtual bool ChangeHouseAddStatus(AppSiteStatus status)
        {
            throw new System.NotImplementedException();
        }

        #region Admin  Configuration
        public virtual void ChangeServerSetting(AppSiteServerSetting appSiteServerSetting)
        {
            if (this.AppSiteServerSetting == null)
            {
                AppSiteServerSetting = new AppSiteServerSetting(this);
            }

            this.AppSiteServerSetting.AdRequestCacheLifeTime = appSiteServerSetting.AdRequestCacheLifeTime;
            this.AppSiteServerSetting.WatchTraffic = appSiteServerSetting.WatchTraffic;
            this.AppSiteServerSetting.GenerateSystemUniqueId = appSiteServerSetting.GenerateSystemUniqueId;
            this.AppSiteServerSetting.ImpressionCountMode = appSiteServerSetting.ImpressionCountMode;
            this.AppSiteServerSetting.AllowBlindAds = appSiteServerSetting.AllowBlindAds;
            this.AppSiteServerSetting.SupportedAdTypes = !string.IsNullOrWhiteSpace(appSiteServerSetting.SupportedAdTypes) ? appSiteServerSetting.SupportedAdTypes : null;
            this.AppSiteServerSetting.SupportedBannerImageTypes = appSiteServerSetting.SupportedBannerImageTypes;
            this.AppSiteServerSetting.NativeAdLayout = appSiteServerSetting.NativeAdLayout;
        }
        public virtual void ResetServerSetting()
        {
            if (this.AppSiteServerSetting != null)
            {
                this.AppSiteServerSetting.GenerateSystemUniqueId = default(bool);
                this.AppSiteServerSetting.ImpressionCountMode = ImpressionCountMode.OnBeacon;
                this.AppSiteServerSetting.AllowBlindAds = default(bool);
                this.AppSiteServerSetting.SupportedAdTypes = null;
                this.AppSiteServerSetting.SupportedBannerImageTypes = default(string);
            }
        }

        public virtual AppSiteRevenueCalculationSetting CurrentRevenueCalculationSettingDiscount()
        {
            var cuurentdata = Framework.Utilities.Environment.GetServerTime().AddSeconds(1);
            return RevenueCalculationSettings.FirstOrDefault(x => x.FromDate <= cuurentdata && (!x.ToDate.HasValue || x.ToDate >= cuurentdata));
        }

        public virtual void RemoveRevenueCalculationSetting()
        {
            if ((RevenueCalculationSettings != null) && (RevenueCalculationSettings.Count > 0))
            {
                var currentConfig = CurrentRevenueCalculationSettingDiscount();

                // reactive current Configuration 
                if (currentConfig != null)
                    currentConfig.Deactive();
            }
        }

        public virtual void AddRevenueCalculationSetting(AppSiteRevenueCalculationSetting setting)
        {
            if ((RevenueCalculationSettings == null) || (RevenueCalculationSettings.Count == 0))
            {
                RevenueCalculationSettings = new List<AppSiteRevenueCalculationSetting>();
            }

            var cuurentdata = Framework.Utilities.Environment.GetServerTime().AddSeconds(1);
            var currentSetting = CurrentRevenueCalculationSettingDiscount();

            if ((currentSetting != null) && (currentSetting.Equals(setting)))
            {
                //no need to add any new entity
                return;
            }

            // deactivate current setting
            if (currentSetting != null)
                currentSetting.Deactive();

            // insert new setting
            // update setting info
            RevenueCalculationSettings.Add(new AppSiteRevenueCalculationSetting
            {
                AppSite = this,
                CalculationMode = setting.CalculationMode,
                FromDate = cuurentdata,
                ToDate = null,
                Value = setting.Value
            });
        }
        #endregion


        public virtual bool isMatch(AdCreative ad)
        {
            throw new System.NotImplementedException();
        }
        public virtual void Validate(bool checkSecurity, bool statusCheck = false)
        {
            IsValid = false;
            if (checkSecurity)
            {
                if ((this.Account != null) && (this.Account.ID != Framework.OperationContext.Current.UserInfo<Noqoush.Framework.UserInfo.IUserInfo>().AccountId))
                {
                    throw new AccountNotValidException();
                }

                /*if (!Framework.OperationContext.Current.UserInfo<Noqoush.Framework.UserInfo.IUserInfo>().IsPrimaryUser)
                {
                    if ((this.User != null) && (this.User.ID != Framework.OperationContext.Current.UserInfo<Noqoush.Framework.UserInfo.IUserInfo>().UserId))
                    {
                        throw new AccountNotValidException();
                    }
                }*/
            }
            if (this.IsDeleted)
            {
                throw new DataNotFoundException();
            }
            if (statusCheck)
            {
                IsValid = DataAnnotationsValidator.TryValidate(this);
            }

          
            IsValid = true;
        }
        public virtual string GetDescription()
        {
            return Name;
        }
    }
}

