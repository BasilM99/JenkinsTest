//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Noqoush.AdFalcon.Domain.Model.AppSite;
using Noqoush.AdFalcon.Domain.Model.Campaign.Performance;
using Noqoush.AdFalcon.Domain.Model.Core;
using Noqoush.AdFalcon.Domain.Model.Core.CostElement;
using Noqoush.AdFalcon.Exceptions;
using Noqoush.AdFalcon.Exceptions.Core;
using Noqoush.Framework;
using Noqoush.Framework.DataAnnotations;
using Noqoush.AdFalcon.Domain.Model.Campaign.Targeting;
using System.Linq;
using Noqoush.Framework.ExceptionHandling.Exceptions;
using Noqoush.AdFalcon.Domain.Services;
using Noqoush.Framework.UserInfo;
using Noqoush.AdFalcon.Domain.Repositories.Campaign;
using System.Threading;
using Noqoush.AdFalcon.Domain.Repositories.Core;
using Noqoush.Framework.DomainServices;
using Noqoush.Framework.DistributedEventBroker.PubSub.Publishing;
using Noqoush.Framework.DistributedEventBroker.PubSub.Entities;
using Noqoush.Framework.Kafka;
using Noqoush.AdFalcon.EventDTOs;
using Noqoush.Framework.DomainServices.EventBroker;
using Noqoush.AdFalcon.Domain.Repositories;
using Noqoush.AdFalcon.Domain.Model.Account;
using Noqoush.AdFalcon.Domain.Common.Model.Core;
using Noqoush.AdFalcon.Domain.Common.Model.Campaign;
using Noqoush.AdFalcon.Domain.Common.Model.Account;

namespace Noqoush.AdFalcon.Domain.Model.Campaign
{
    //[DataContract(Name = "CampaignType")]
    //public enum CampaignType
    //{
    //    [EnumMember]
    //    [EnumText("Undefined", "BidConfigType")]
    //    Undefined = 0,
    //    [EnumMember]
    //    [EnumText("NormalAd", "Campaign")]
    //    Normal = 1,
    //    [EnumText("AdHouse", "Campaign")]
    //    [EnumMember]
    //    AdHouse = 2,
    //    [EnumMember]
    //    ProgrammaticGuaranteed =3


    //}

    //[DataContract(Name = "PriceMode")]
    //public enum PriceMode
    //{
    //    [EnumMember]
    //    [EnumText("Undefined", "BidConfigType")]
    //    Undefined = 0,
    //    [EnumMember]
    //    [EnumText("FixedType", "CampaignSettings")]
    //    Fixed = 1,
    //    [EnumText("Dynamic", "Global")]
    //    [EnumMember]
    //    Dynamic = 2
    //}

    //[DataContract(Name = "CampaignLifeTime")]
    //public enum CampaignLifeTime
    //{
    //    [EnumMember]
    //    [EnumText("Undefined", "BidConfigType")]
    //    Undefined = 0,
    //    [EnumMember]
    //    [EnumText("Default", "Global")]
    //    Default = 1,
    //    [EnumText("Dynamic", "Global")]
    //    [EnumMember]
    //    LifeTime = 2
    //}
    
    public class Campaign : AdBase<Campaign, AdCampaignStatus>
    {
        private ICampaignRepository campaignRepository = IoC.Instance.Resolve<ICampaignRepository>();
        private static ICampaignPerformanceRepository _campaignPerformanceRepository = null;
        private static ICampaignPerformanceRepository CampaignPerformanceRepository
        {
            get
            {
                if (_campaignPerformanceRepository == null)
                {
                    _campaignPerformanceRepository = Framework.IoC.Instance.Resolve<ICampaignPerformanceRepository>();
                }
                return _campaignPerformanceRepository;
            }
        }


        private static IAccountRepository _accountRepositoryy = null;
        private static IAccountRepository AccountRepository
        {
            get
            {
                if (_accountRepositoryy == null)
                {
                    _accountRepositoryy = Framework.IoC.Instance.Resolve<IAccountRepository>();
                }
                return _accountRepositoryy;
            }
        }

        private static ICostModelWrapperRepository _costModelWrapperRepository = null;
        private static ICostModelWrapperRepository CostModelWrapperRepository
        {
            get
            {
                if (_costModelWrapperRepository == null)
                {
                    _costModelWrapperRepository = Framework.IoC.Instance.Resolve<ICostModelWrapperRepository>();
                }
                return _costModelWrapperRepository;
            }
        }
        private static IList<string> billingInfoPropTobeNotifyed = new List<string> { "Budget", "DailyBudget", "EndDate", "Pacing","Discount" };
        //TODO:Osaleh to add this value as configuration
        private const int minBudget = 100;
        private const int minDailyBudget = 10;
        public virtual DiscountType Discount_Type { get; set; }
        public virtual string Discount_ValueDescriper { get; set; }

        public virtual AdvertiserAccount AdvertiserAccount  { get; set; }
        public virtual DateTime Discount_FromDate { get; set; }
        public virtual DateTime Discount_ToDate { get; set; }
        public virtual string UniqueId { get; set; }
        private string _NameLower;

        public virtual string NameLower { get { return _NameLower; } set { _NameLower = !string.IsNullOrEmpty(Name) ? Name.Trim().ToLower() : ""; } }
        public virtual PacingPolicies Pacing { get; set; }
        public virtual decimal Budget { get; set; }
        public virtual bool LogAdMarkup { get; set; }
        public virtual decimal? CPMValue { get; set; }
        //public virtual string Advertiser { get; set; }
        public virtual CostModelWrapperEnum? CostModelWrapper { get; set; }
        public virtual bool IsClientLocked { get; set; }
        public virtual bool TrackConversions { get; set; }
        public virtual decimal? DailyBudget { get; set; }
        public virtual string Note { get; set; }
        public virtual Account.User User { get; set; }
        public virtual IList<AdGroup> AdGroups { get; set; }
        public virtual Account.Account Account { get; set; }
        public virtual Advertiser Advertiser { get; set; }
        public virtual DateTime? EndDate { get; set; }
        public virtual DateTime StartDate { get; set; }

        public virtual DateTime? EndTime { get; set; }
        public virtual DateTime? StartTime { get; set; }

        public virtual string FolderURL { get; set; }
        public virtual decimal Spend
        {
            get
            {
                var performance = CampaignPerformanceRepository.Query(x => x.CampaignId == ID);
                return performance.Sum(x => x.Spend);
            }
        }

        public virtual bool IsRuntime { get; set; }


        public virtual CampaignType CampaignType { get; set; }
        public virtual PriceMode PriceMode { get; set; }

        public virtual AgencyCommission AgencyCommission { get; set; }
        public virtual int GetPacingValue()
        {
           return  (int)this.Pacing;

        }

        public virtual void SetPacingValue(int val)
        {
            foreach (var adGroup in GetGroups())
            {
                adGroup.SetPacingValue(val);
            }
            //(DayOfWeek)Enum.ToObject(typeof(DayOfWeek), (int)DayOfWeek.Wednesday);
            this.Pacing=(PacingPolicies)Enum.ToObject(typeof(PacingPolicies), val);


        }


        public virtual List<int> GetAudienceSegmentsForExternal()
        {
            List<int> results = new List<int>();
            foreach (var adGroup in GetGroups())
            {
              var tempResult=  adGroup.GetAudienceSegmentsForExternal();
                results.AddRange(tempResult);

            }

            return results.Distinct().ToList();

        }
        public virtual void SetAdGroupMarkup()
        {
            foreach (var adGroup in GetGroups())
            {
                adGroup.LogAdMarkup = true;
            }
            //(DayOfWeek)Enum.ToObject(typeof(DayOfWeek), (int)DayOfWeek.Wednesday);
          


        }
        public override AdCampaignStatus Status
        {
            get
            {
                AdCampaignStatus returnStatus = null;
                var ads = GetAds();
                var localAds = ads.Select(x => x.Status).ToList();
                //if no ad then the status is empty
                if ((localAds == null) || localAds.Count == 0)
                {
                    returnStatus = AdCampaignStatus.Empty;
                    return returnStatus;
                }
                //get not Submitted count
                var noneSubmittedCount = localAds.Count(item => item.ID == AdCreativeStatus.Submitted.ID);
                //if count is zero then the ad group is empty
                if (noneSubmittedCount == localAds.Count)
                {
                    returnStatus = AdCampaignStatus.Empty;
                    return returnStatus;
                }


                //get all Completed/Expired status count
                var completedCount =
                    localAds.Count(
                        item => (item.ID == AdCreativeStatus.Completed.ID || item.ID == AdCreativeStatus.Expired.ID));
                //if Completed/Expired Count is Ads Count then the ad group is Completed
                if (completedCount == localAds.Count)
                {
                    returnStatus = AdCampaignStatus.Completed;
                    return returnStatus;
                }


                //get all Active status count
                var activeCount = localAds.Count(item => (item.ID == AdCreativeStatus.Active.ID || item.ID == AdCreativeStatus.ActiveAdServer.ID));
                //if Active count is Ads Count then the ad group is Running
                if (activeCount == localAds.Count)
                {
                    returnStatus = AdCampaignStatus.Running;
                    return returnStatus;
                }



                //check some ads are active then status is "Running With Attention Action Needed"
                if ((activeCount != 0))
                {
                    returnStatus = AdCampaignStatus.RunningWithAttentionActionNeeded;
                    return returnStatus;
                }



                ////get not disapproved ,Inactive,Paused , Budget Paused,Completed or Expired status count
                //var count = localAds.Count(item => (item.StatusId == AdCreativeStatus.DisApproved.ID ||
                //                                    item.StatusId == AdCreativeStatus.Inactive.ID ||
                //                                    item.StatusId == AdCreativeStatus.Paused.ID ||
                //                                    item.StatusId == AdCreativeStatus.BudgetPaused.ID ||
                //                                    item.StatusId == AdCreativeStatus.Completed.ID ||
                //                                    item.StatusId == AdCreativeStatus.Expired.ID));
                ////if count is Ads Count then the ad group is "Attention/Action Needed"
                //if (count == localAds.Count)
                //{
                returnStatus = AdCampaignStatus.AttentionActionNeeded;
                return returnStatus;
                //}
            }
        }
        //public virtual IList<CampaignDiscount> Discounts { get; set; }
        public virtual Discount Discount { get; set; }
        public virtual string DomainURL { get; set; }
        public virtual Keyword Keyword { get; set; }
        public virtual DateTime ModifiedOn { get; set; }
        public virtual CampaignServerSetting CampaignServerSetting { get; set; }
        public virtual CampaignLifeTime LifeTime { get; set; }
        public virtual IList<CampaignAssignedAppsite> CampaignAssignedAppsites { get; set; }

        //   public virtual IList<CampaignBidConfig> CampaignBidConfigs { get; set; }

        #region Helpers
        private decimal GetDiscountedBid(Campaign campaign, decimal bid)
        {
            var result = bid;
            var time = Framework.Utilities.Environment.GetServerTime();
            if (campaign.Discount != null &&
                time >= campaign.Discount.FromDate &&
                (!campaign.Discount.ToDate.HasValue || time <= campaign.Discount.ToDate))
            {
                decimal discountValue = campaign.Discount.Value;

                if (Discount.Type == DiscountType.Fixed)
                {
                    discountValue = FixDiscountValue(discountValue, false);
                }
                result = CalculateDiscountedValue(bid, discountValue, campaign.Discount.Type);
            }
            else
            {
                var accountDiscount = campaign.Account.Discounts.FirstOrDefault(x => time >= x.Discount.FromDate && (!x.Discount.ToDate.HasValue || time <= x.Discount.ToDate));
                if (accountDiscount != null)
                {
                    result = CalculateDiscountedValue(bid, accountDiscount.Discount.Value, DiscountType.Percentage);
                }
            }
            return result;
        }
        private decimal CalculateDiscountedValue(decimal bid, decimal discountValue, DiscountType discountType)
        {
            var result = bid;
            switch (discountType)
            {
                case DiscountType.Fixed:
                    {
                        result = (decimal)(bid - discountValue > 0 ? bid - discountValue : 0);
                        break;
                    }
                case DiscountType.Percentage:
                    {
                        result = bid * (1 - discountValue);
                        break;
                    }
            }
            return result;
        }

        #endregion
        #region Campaign
        #region Validation
        public virtual bool IsValid { get; set; }
        //TODO:Need more generic way to handle this
        public virtual bool ValidateBudget
        {
            get
            {
                return
                    !(OperationContext.Current.CurrentPrincipal.IsInRole("AdOps") ||
                      OperationContext.Current.CurrentPrincipal.IsInRole("Administrator"));
            }
        }

        public virtual void ValidateNew(bool validateBudget = false)
        {
            IsValid = false;
            //create business Exception to hold error data list 
            var error = new BusinessException();

            if (CampaignType != CampaignType.AdHouse && ValidateBudget && Budget < minBudget)
            {
                //Daily Budget less than the min Budget
                error.Errors.Add(new ErrorData { ID = "MinBudget" });
            }

            if (CampaignType != CampaignType.AdHouse && ValidateBudget && DailyBudget < minDailyBudget)
            {
                //Daily Budget less than the min Budget
                error.Errors.Add(new ErrorData { ID = "MinDailyBudget" });
            }
            if (CampaignType != CampaignType.AdHouse && Budget < DailyBudget)
            {
                //Total Budget less than the Daily Budget
                error.Errors.Add(new ErrorData { ID = "DailyBudgetBR" });
            }
            if ((this.StartDate.CompareTo(Framework.Utilities.Environment.GetServerTime().Date) < 0))
            {
                //Start data is before the current data 
                //this shouldn't happen
                error.Errors.Add(new ErrorData { ID = "CampaignStartDateBeforeNowBR" });
            }
            if ((this.EndDate.HasValue) && (this.EndDate.Value.CompareTo(Framework.Utilities.Environment.GetServerTime().Date) < 0))
            {
                //end data is before the current data 
                //this shouldn't happen
                error.Errors.Add(new ErrorData { ID = "CampaignEndDateBR" });
            }
            if ((this.EndDate.HasValue) && (this.EndDate.Value.CompareTo(this.StartDate) < 0))
            {
                //Start data is before the end data 
                //this shouldn't happen
                error.Errors.Add(new ErrorData { ID = "CampaignEndDateBeforeEndDateBR" });
            }


            //check time
            var timeDiffrenceMsg = string.Format(Framework.Resources.ResourceManager.Instance.GetResource("TimeDiffrenceBRM"), Configuration.MaxHoursDifference);
            var sTime = StartTime.HasValue ? StartTime.Value : Framework.Utilities.Environment.GetServerTime().Date;
            var eTime = EndTime.HasValue ? EndTime.Value : Framework.Utilities.Environment.GetServerTime().Date.AddHours(24);
            var sp = eTime - sTime;


            if (sp.TotalHours < Configuration.MaxHoursDifference)
            {
                error.Errors.Add(new ErrorData { Message = timeDiffrenceMsg });
            }
            if (error.Errors.Count > 0)
            {
                IsValid = false;
                throw (error);
            }
            IsValid = DataAnnotationsValidator.TryValidate(this);
            IsValid = true;
        }
        public virtual void Validate(bool checkSecurity, bool statusCheck = false, bool validateDates = false)
        {
            IsValid = false;
            if (checkSecurity)
            {
                if ((this.Account != null) && (this.Account.ID != OperationContext.Current.UserInfo<IUserInfo>().AccountId.Value))
                {
                    throw new AccountNotValidException();
                }

                /*
                if (!Framework.OperationContext.Current.UserInfo<Noqoush.Framework.UserInfo.IUserInfo>().IsPrimaryUser)
                {
                    if ((this.User != null) && (this.User.ID != Framework.OperationContext.Current.UserInfo<Noqoush.Framework.UserInfo.IUserInfo>().UserId))
                    {
                        throw new AccountNotValidException();
                    }
                }*/
            }
            if (this.IsDeleted)
            {

                throw new DataNotFoundException();
            }

            if (statusCheck)
            {
                //create business Exception to hold error data list 
                BusinessException error = new BusinessException();


                if (CampaignType != CampaignType.AdHouse && Budget < Spend)
                {
                    error.Errors.Add(new ErrorData { ID = "BudgetBR" });
                }
                if (ValidateBudget && CampaignType != CampaignType.AdHouse && Budget < minBudget)
                {
                    error.Errors.Add(new ErrorData { ID = "MinBudget" });
                }
                if (CampaignType != CampaignType.AdHouse && Budget < DailyBudget)
                {
                    error.Errors.Add(new ErrorData { ID = "DailyBudgetBR" });
                }
                if (ValidateBudget && CampaignType != CampaignType.AdHouse && DailyBudget < minDailyBudget)
                {
                    error.Errors.Add(new ErrorData { ID = "MinDailyBudget" });
                }
                if (validateDates)
                {
                    if ((this.StartDate.CompareTo(Framework.Utilities.Environment.GetServerTime().Date) < 0))
                    {
                        //Start data is before the current data 
                        //this shouldn't happen
                        error.Errors.Add(new ErrorData { ID = "CampaignStartDateBeforeNowBR" });
                    }
                }
                if (StartTime.HasValue && EndTime.HasValue && EndTime < StartTime)
                {
                    error.Errors.Add(new ErrorData { ID = "CampaignEndTimeBeforeStartTimeBR" });
                }
                if ((this.EndDate.HasValue) && (this.EndDate.Value.CompareTo(Framework.Utilities.Environment.GetServerTime().Date) < 0))
                {
                    //end data is before the current data 
                    //this shouldn't happen
                    error.Errors.Add(new ErrorData { ID = "CampaignEndDateBR" });
                }

                //check time
                var timeDiffrenceMsg = string.Format(Framework.Resources.ResourceManager.Instance.GetResource("TimeDiffrenceBRM"), Configuration.MaxHoursDifference);
                var sTime = StartTime.HasValue ? StartTime.Value : Framework.Utilities.Environment.GetServerTime().Date;
                var eTime = EndTime.HasValue ? EndTime.Value : Framework.Utilities.Environment.GetServerTime().Date.AddHours(24);
                var sp = eTime - sTime;

                if (sp.TotalHours < Configuration.MaxHoursDifference)
                {
                    error.Errors.Add(new ErrorData { Message = timeDiffrenceMsg });
                }

                if (error.Errors.Count > 0)
                {
                    IsValid = false;
                    throw (error);
                }
                IsValid = DataAnnotationsValidator.TryValidate(this);
            }
            if (this.AdvertiserAccount!=null)
            this.AdvertiserAccount.Validate(checkSecurity);

            IsValid = true;
        }


        public virtual IList<ErrorData> GetWarnings(decimal budget, decimal? dailyBudge, DateTime? endDate, bool isNew = false)
        {
            var warnings = new List<ErrorData>();
            //check  account found
            var remaining = budget - Spend;
            if (CampaignType != CampaignType.AdHouse && Account.AccountSummary.Funds + Account.AccountSummary.Credit < remaining)
            {
                warnings.Add(new ErrorData { ID = "FundsBR" });
            }
            if (!isNew)
            {
                //check end date 
                //if the new end date is today then show warning to the user
                if ((endDate.HasValue))
                {
                    //if has end date and the new values is the same 
                    // then don't do an thing
                    if ((EndDate.HasValue) && (endDate.Value.CompareTo(EndDate.Value) == 0))
                    {

                    }
                    //else
                    //no end date or new value is not equal old value
                    else
                    {
                        if (endDate.Value.Date.CompareTo(Framework.Utilities.Environment.GetServerTime().Date) == 0)
                        {
                            warnings.Add(new ErrorData { ID = "UpdateEndDateBR" });
                        }
                    }
                }
                //check if the new budget is less than the old budget
                //if yes then show the user warning that the system may exceed this budget
                if (CampaignType != CampaignType.AdHouse && Budget > budget)
                {
                    warnings.Add(new ErrorData { ID = "UpdateBudgetBR" });
                }

                //check if the new Daily Budget is less than the old Daily Budget
                //if yes then show the user warning that the system may exceed this budget
                if (CampaignType != CampaignType.AdHouse && dailyBudge.HasValue)
                {
                    if ((!DailyBudget.HasValue) || (DailyBudget > dailyBudge))
                    {
                        warnings.Add(new ErrorData { ID = "UpdateDailyBudgetBR" });
                    }
                }
            }
            return warnings;
        }
        public virtual IList<ErrorData> GetWarnings()
        {

            var warnings = new List<ErrorData>();
            //check  account found
            var remaining = Budget - Spend;
            if (CampaignType != CampaignType.AdHouse && Account.AccountSummary.Funds + Account.AccountSummary.Credit < remaining)
            {
                warnings.Add(new ErrorData { ID = "FundsBR" });
            }
            return warnings;
        }
        public virtual IList<ErrorData> GetAdminWarnings()
        {
            var warnings = new List<ErrorData>();
            /*
            //check  account found
            var remaining = Budget - Spend;
            if (Account.AccountSummary.Funds + Account.AccountSummary.Credit < remaining)
            {
                warnings.Add(new ErrorData { ID = "FundsBR" });
            }*/
            // check admin settings
            if ((Keyword == null) || (Advertiser == null))
            {
                warnings.Add(new ErrorData("CampaignSettingsBR"));
            }
            return warnings;
        }
        public virtual void ValidateGroup(AdGroup adGroup)
        {
            //var bidManager = Framework.IoC.Instance.Resolve<IBidManager>();
            //adGroup.IsValid = false;
            // //check min bid
            //var parameters = new BidParameter();
            //parameters.ActionType = adGroup.Objective.AdAction.ID;
            //parameters.Demographic = GetIds(adGroup.Targetings.ToList().OfType<DemographicTargeting>().ToList<TargetingBase>());
            //parameters.DeviceTargetingTypeId = adGroup.GetDeviceTargetingTypeId();
            //parameters.Geographies = GetIds(adGroup.Targetings.ToList().OfType<GeographicTargeting>().ToList<TargetingBase>());
            //parameters.Keywords = GetIds(adGroup.Targetings.ToList().OfType<KeywordTargeting>().ToList<TargetingBase>());
            //parameters.Manufacturers = GetIds(adGroup.Targetings.ToList().OfType<KeywordTargeting>().ToList<TargetingBase>());
            //var minBid = bidManager.GetBid(parameters);
            //adGroup.IsValid = true;
        }
        private int[] GetIds(List<TargetingBase> targetings)
        {
            var returnValue = new List<int>();

            return returnValue.ToArray();
        }
        #endregion
        public override bool Resume()
        {
            //this.Status = AdCampaignStatus.Running;
            foreach (var adGroup in GetGroups())
            {
                adGroup.Resume();
            }
            return base.Resume();
        }
        public override bool Pause()
        {
            //this.Status = AdCampaignStatus.AttentionActionNeeded;
            foreach (var adGroup in GetGroups())
            {
                adGroup.Pause();
            }
           // PublishCampPauseEventForKafka();
            return base.Pause();
        }
        public override bool Delete()
        {
            foreach (var adGroup in GetGroups())
            {
                adGroup.Delete();
            }
            foreach (var campaignAssignedAppsite in GetCampaignAssignedAppsite())
            {
                campaignAssignedAppsite.Delete();
            }
            return base.Delete();
        }
        public override Campaign Clone()
        {
            var cloneObj = new Campaign()
            {
                Account = this.Account,
                User = this.User,
                Budget = this.Budget,
                LogAdMarkup = this.LogAdMarkup,
                PriceMode = this.PriceMode,
                CreationDate = Framework.Utilities.Environment.GetServerTime(),
                DailyBudget = this.DailyBudget,
                EndDate = this.EndDate,
                //FolderURL = this.FolderURL,
                IsDeleted = this.IsDeleted,
                Name = this.Name,
                Note = this.Note,
                Keyword = this.Keyword,
                AgencyCommission = this.AgencyCommission,
                IsClientLocked = this.IsClientLocked,
                //Discount = this.Discount,
                StartDate = this.StartDate,
                StartTime = StartTime,
                EndTime = EndTime,
                CampaignType = this.CampaignType,
                CPMValue = this.CPMValue,
                Advertiser = this.Advertiser,
                Pacing = this.Pacing,
                LifeTime = this.LifeTime,
                AdvertiserAccount = this.AdvertiserAccount,
                AdGroups = new List<AdGroup>()
            };

            cloneObj.Discount = Discount;
            cloneObj.CostModelWrapper = CostModelWrapper;
            cloneObj.ChangeCampaignAssignedAppsite(this.CampaignAssignedAppsites);
            cloneObj.CampaignServerSetting = new CampaignServerSetting(cloneObj);
            cloneObj.ChangeServerSetting(this.CampaignServerSetting);

            cloneObj.CampaignServerSetting.FrequencyCappingList = new List<CampaignFrequencyCapping>();
            foreach (var item in CampaignServerSetting.GetFrequencyCappingList())
            {
                cloneObj.CampaignServerSetting.FrequencyCappingList.Add(new CampaignFrequencyCapping()
                {
                    CampaignServerSetting = cloneObj.CampaignServerSetting,
                    Event = item.Event,
                    Interval = item.Interval,
                    Number = item.Number,
                    Type = item.Type
                });
            }

            foreach (var adGroup in GetGroups())
            {
                var adGroupClone = adGroup.Clone(cloneObj);
            }
            return cloneObj;
        }
        public virtual void AddDiscount(Core.Discount discount)
        {
            if (discount.Type == DiscountType.Percentage)
            {
                discount.Value /= 100;
            }
            else
            {
                discount.Value = FixDiscountValue(discount.Value, true);
            }

            Discount = discount;
        }
        public virtual void RemoveDiscount()
        {
            Discount = null;
        }
        public virtual Discount GetActiveDiscount(bool ReturnActualValue=false)
        {
            Discount discount = null;
            var time = Framework.Utilities.Environment.GetServerTime();
            if (Discount != null &&
                time >= Discount.FromDate &&
                (!Discount.ToDate.HasValue || time <= Discount.ToDate))
            {
                decimal discountValue = Discount.Value;

                if (Discount.Type == DiscountType.Fixed)
                {
                    discountValue = FixDiscountValue(discountValue, false, ReturnActualValue);
                }

                discount = new Discount { Value = discountValue, Type = Discount.Type, ToDate = Discount.ToDate };

                if (ReturnActualValue == true)
                { discount.FromDate = Discount.FromDate; }
            }
            else
            {
                var accobj = AccountRepository.Get(this.Account.ID);
               
                var AccountDisc = accobj.Discounts;
                  var accountDiscount = AccountDisc.FirstOrDefault(x => time >= x.Discount.FromDate && (!x.Discount.ToDate.HasValue || time <= x.Discount.ToDate));
                if (accountDiscount != null)
                {
                    discount = new Discount { Value = accountDiscount.Discount.Value, Type = DiscountType.Percentage };//, ToDate =(Discount.ToDate };
                }
                if(ReturnActualValue==true && accountDiscount!=null)
                { discount.FromDate = accountDiscount.Discount.FromDate; }
            }
            return discount;
        }

        public virtual string GetCostModelWrapperDescription(string wrapperValue)
        {

            if (!string.IsNullOrEmpty(wrapperValue))
            {
                CostModelWrapperEnum cValue = (CostModelWrapperEnum)Enum.Parse(typeof(CostModelWrapperEnum), wrapperValue);
                var costModelWrapper = CostModelWrapperRepository.Get((int)cValue);
                if (costModelWrapper != null)
                    return costModelWrapper.GetDescription();
            }
            return string.Empty;

        }
        private decimal FixDiscountValue(decimal value, bool setOperation, bool ReturnActualValue = false)
        {
            int factor = 1;
            if (CostModelWrapper.HasValue)
            {
                var costModelWrapper = CostModelWrapperRepository.Get((int)CostModelWrapper);
                factor = costModelWrapper.Factor;
            }
            decimal fixedValue = value;
            if(ReturnActualValue==false)
           fixedValue = setOperation ? value / factor : value * factor;

            return fixedValue;
        }

        #endregion
        #region Ad Groups
        public virtual IList<AdGroup> GetGroups()
        {
            return this.AdGroups.Where(item => item.IsDeleted == false).ToList();
        }
        public virtual void AddGroup(AdGroup group)
        {
            this.AdGroups.Add(group);
        }
        public virtual bool RemoveGroup(AdGroup group)
        {
            var adGroups = this.AdGroups;
            if (adGroups.Contains(group))
            {
                group.Delete();
                return true;
            }
            else
            {
                return false;
            }
        }
        public virtual void ChangeAccount(Account.Account account)
        {
            if (this.Account == null)
            {
                this.Account = account;
            }
        }
        public virtual void ChangeUser(Account.User User)
        {
            if (this.User == null)
            {
                this.User = User;
            }
        }
        public virtual void RemoveGroupTargeting(AdGroup group, TargetingBase targetingBase)
        {
            var targetings = group.Targetings;
            var targetingObj = targetings.FirstOrDefault(targeting => targeting.ID == targetingBase.ID);
            if (targetingObj != null)
            {
                targetings.Remove(targetingBase);
            }
            else
            {
                //this should not happen
                //do nothing
                //TODO:throw exception
                return;
            }
            if (targetingBase is AudienceSegmentTargeting)
            {
                //foreach (AdCreative ad in group.Ads)
                //{
                //    ad.MaxDataBid = null;
                //}
                //if(group.DataBid.HasValue)
                //    group.DataBid = group.DataBid - ((targetingBase as AudienceSegmentTargeting).DataBid.HasValue ? (targetingBase as AudienceSegmentTargeting).DataBid.Value : 0);
                //if (group.MaxDataBid.HasValue)
                //    group.MaxDataBid = group.MaxDataBid - ((targetingBase as AudienceSegmentTargeting).MaxDataBid.HasValue ? group.MaxDataBid + (targetingBase as AudienceSegmentTargeting).MaxDataBid.Value : 0);
            }
        }
        public virtual void AddGroupTargeting(AdGroup group, TargetingBase targetingBase)
        {
            var targetings = group.Targetings;
            if (targetingBase.ID == 0)
            {
                targetingBase.AdGroup = group;
                targetings.Add(targetingBase);
            }
            else
            {
                var targetingObj = targetings.FirstOrDefault(targeting => targeting.ID == targetingBase.ID);
                if (targetingObj == null)
                {
                    targetings.Add(targetingBase);
                }
                else
                {
                    //this should not happen
                    //do nothing
                    //TODO:throw exception
                    return;
                }
            }
           
        }

        public virtual IList<CampaignAssignedAppsite> GetCampaignAssignedAppsite(bool? reurtnIsDeleted = false)
        {
            if (reurtnIsDeleted.HasValue)
            {
                return this.CampaignAssignedAppsites.Where(x => x.IsDeleted == reurtnIsDeleted).ToList();
            }
            else
            {
                return this.CampaignAssignedAppsites.Where(x => !x.IsDeleted).ToList();
            }
        }
        public virtual void AddAssignedAppsites(CampaignAssignedAppsite campaignAssignedAppsites)
        {
            CampaignAssignedAppsite existCampaignAssignedAppsite = GetCampaignAssignedAppsite(true).Where(x => x.ID != campaignAssignedAppsites.ID && x.AppSite.ID == campaignAssignedAppsites.AppSite.ID
                       && x.Campaign.ID == campaignAssignedAppsites.Campaign.ID && x.SubPublisherId == campaignAssignedAppsites.SubPublisherId).FirstOrDefault();
            if (existCampaignAssignedAppsite != null)// Incase add already exist CampaignAssignedAppsite for the same campign and Appsite.Id  
            {// update the existing item 
                existCampaignAssignedAppsite.IsDeleted = false;
                existCampaignAssignedAppsite.Include = campaignAssignedAppsites.Include;
                return;
            }

            if (campaignAssignedAppsites.Campaign == null)
            {
                campaignAssignedAppsites.Campaign = this;
                campaignAssignedAppsites.IsDeleted = false;
            }
            if (this.CampaignAssignedAppsites == null)
            {
                this.CampaignAssignedAppsites = new List<CampaignAssignedAppsite>();
            }
            this.CampaignAssignedAppsites.Add(campaignAssignedAppsites);
        }

        //public virtual IList<CampaignBidConfig> GetCampaignBidConfigs(bool? reurtnIsDeleted = false)
        //{
        //    if (reurtnIsDeleted.HasValue)
        //    {
        //        return this.CampaignBidConfigs.Where(x => x.IsDeleted == reurtnIsDeleted).ToList();
        //    }
        //    else
        //    {
        //        return this.CampaignBidConfigs.Where(x => !x.IsDeleted).ToList();
        //    }
        //}

        //public virtual void AddCampaignBidConfig(CampaignBidConfig campaignBidConfig)
        //{
        //    //x.ID != campaignBidConfig.ID &&
        //    CampaignBidConfig existCampaignBidConfig = GetCampaignBidConfigs(true).Where(x => x.ID != campaignBidConfig.ID && x.Account.ID == campaignBidConfig.Account.ID && x.AppSite.ID == campaignBidConfig.AppSite.ID
        //                && x.AdGroupId == campaignBidConfig.AdGroupId && x.SubPublisherId == campaignBidConfig.SubPublisherId).FirstOrDefault();

        //    if (existCampaignBidConfig != null)// Incase add already exist campaignBidConfig for the same campign wiht same Account.Id and Appsite.Id  
        //    {// update the existing item 
        //        existCampaignBidConfig.IsDeleted = false;
        //        existCampaignBidConfig.Bid = campaignBidConfig.Bid;
        //        return;
        //    }
        //    if (campaignBidConfig.AdGroupId == 0)
        //    {
        //        campaignBidConfig.AdGroupId = this.ID;
        //        campaignBidConfig.IsDeleted = false;
        //    }
        //    if (this.CampaignBidConfigs == null)
        //    {
        //        this.CampaignBidConfigs = new List<CampaignBidConfig>();
        //    }
        //    this.CampaignBidConfigs.Add(campaignBidConfig);
        //}

        //public virtual void DeleteCampaignBidConfig(int id)
        //{
        //    CampaignBidConfig campaignBidConfig = this.CampaignBidConfigs.Where(x => x.ID == id).FirstOrDefault();
        //    if (campaignBidConfig != null)
        //    {
        //        campaignBidConfig.IsDeleted = true;
        //    }
        //}

        public virtual void DeleteAssignedAppsites(int id)
        {
            CampaignAssignedAppsite assignedAppsite = this.CampaignAssignedAppsites.Where(x => x.ID == id).FirstOrDefault();
            if (assignedAppsite != null)
            {
                assignedAppsite.IsDeleted = true;
            }
        }

        public virtual void ResumeGroup(AdGroup group)
        {
            group.Resume();
        }
        public virtual void PauseGroup(AdGroup group)
        {
            group.Pause();
        }

        public virtual IList<AdGroupCostElement> GetGroupCostElements(AdGroup group)
        {
            return group.CostElements.ToList();
        }
        public virtual void RemoveGroupCostElement(AdGroupCostElement costElement)
        {
            costElement.AdGroup.RemoveGroupCostElement(costElement);
        }
        public virtual AdGroupCostElement AddGroupCostElement(AdGroupCostElement costElement)
        {
            return costElement.AdGroup.AddGroupCostElement(costElement);
        }
        public virtual AdGroupCostElement UpdateGroupCostElement(AdGroupCostElement costElement, decimal value)
        {
            return costElement.AdGroup.UpdateGroupCostElement(costElement, value);
        }


        public virtual IList<AdGroupFee> GetGroupFees(AdGroup group)
        {
            return group.Fees!=null ? group.Fees.ToList():null;
        }
        public virtual void RemoveGroupFee(AdGroupFee costElement)
        {
            costElement.AdGroup.RemoveGroupFee(costElement);
        }
        public virtual AdGroupFee AddGroupFee(AdGroupFee costElement)
        {
            return costElement.AdGroup.AddGroupFee(costElement);
        }
        public virtual AdGroupFee UpdateGroupFee(AdGroupFee costElement, decimal value)
        {
            return costElement.AdGroup.UpdateGroupFee(costElement, value);
        }




        public virtual decimal GetDiscountedBid(AdGroup group)
        {
            var campaign = group.Campaign;
            var bid = group.GetReadableBid();
            return GetDiscountedBid(campaign, bid);
        }

        #endregion
        #region Ad Creative
        public virtual IList<AdCreative> GetGroupAds(AdGroup group)
        {
            return @group != null ? @group.GetAds() : null;
        }

        public virtual IList<AdCreative> GetAds(bool includeDeleted = false)
        {
            var ads = new List<AdCreative>();
            foreach (var group in GetGroups())
            {
                if (group.Ads != null)
                {
                    if (!includeDeleted)
                    {
                        ads.AddRange(group.Ads.Where(x => x.IsDeleted == false && x.Parent == null).ToList());
                    }
                    else
                    {
                        ads.AddRange(group.Ads.Where(x => x.Parent == null).ToList());
                    }
                }
            }
            return ads;
        }

        public virtual IList<AdCreative> DeleteGroupAd(AdGroup group, AdCreative AdId)
        {
            if (group != null)
            {
                AdId.Delete();
            }
            return null;
        }
        public virtual IList<AdCreative> UpdateAdBid(AdGroup group, AdCreative AdId, decimal bid)
        {
            if (group != null)
            {
                AdId.SetAdCreativeBid(bid, group.CostModelWrapper.Factor);
            }
            return null;
        }
        public virtual IList<AdCreative> ResumeAd(AdGroup group, AdCreative AdId)
        {
            if (group != null)
            {
                AdId.Resume();
            }
            return null;
        }
        public virtual IList<AdCreative> PauseAd(AdGroup group, AdCreative AdId)
        {
            if (group != null)
            {
                AdId.Pause();
            }
            return null;
        }
        public virtual void RejectAd(AdGroup group, AdCreative ad)
        {
            if (group != null)
            {
                ad.Disapproved();
            }
        }
        public virtual void ApproveAd(AdGroup group, AdCreative ad)
        {
            if (group != null)
            {
                ad.Approve();
            }
        }
        public virtual void AddAppSiteAdQueue(AdGroup group, AdCreative ad, AppSite.AppSite appSite, bool include = true)
        {
            if (group != null)
            {
                ad.AddAppSiteAdQueue(appSite, include);
            }
        }
        public virtual void RemoveAppSiteAdQueue(AdGroup group, AdCreative ad, AppSite.AppSite appSite)
        {
            if (group != null)
            {
                ad.RemoveAppSiteAdQueue(appSite);
            }
        }
        public virtual void UpdateAppSiteAdQueueType(AdGroup group, AdCreative ad, bool include)
        {
            if (group != null)
            {
                ad.UpdateAppSiteAdQueueType(include);
            }
        }

        public virtual void ClearAppSiteAdQueue(AdGroup group, AdCreative ad)
        {
            if (group != null)
            {
                ad.ClearAppSiteAdQueue();
            }
        }
        public virtual void AddAdCreative(AdGroup group, AdCreative adCreative)
        {
            adCreative.Group = group;
            group.AddAd(adCreative);
        }
        public virtual void SetCreativeStatus(AdGroup group, AdCreative adCreative, bool isChanged)
        {
            if (adCreative.ID == 0)
            {
                adCreative.Status = AdCreativeStatus.Submitted;
            }
            else
            {
                //id old ad and in paused status then change the PausedStatus to Submitted and keep it on paused status
                if (isChanged)
                {
                    if ((adCreative.Status != null) && (adCreative.Status.ID == AdCreativeStatus.Paused.ID))
                    {
                        adCreative.PausedStatus = AdCreativeStatus.Submitted;
                    }
                    else
                    {
                        adCreative.Status = AdCreativeStatus.Submitted;
                    }
                }
            }
        }
        public virtual bool IsContainsAds(bool includeDeleted = false)
        {
            return this.GetAds(includeDeleted).Any(x =>
                        x.Status.ID == AdCreativeStatus.Active.ID || x.Status.ID == AdCreativeStatus.ActiveAdServer.ID ||
                        x.Status.ID == AdCreativeStatus.BudgetPaused.ID ||
                        x.Status.ID == AdCreativeStatus.Completed.ID ||
                       (x.PausedStatus != null &&( x.PausedStatus.ID == AdCreativeStatus.Active.ID || x.PausedStatus.ID == AdCreativeStatus.ActiveAdServer.ID)) ||
                       (x.PausedStatus != null && x.PausedStatus.ID == AdCreativeStatus.BudgetPaused.ID) ||
                       (x.PausedStatus != null && x.PausedStatus.ID == AdCreativeStatus.Completed.ID));
        }

        public virtual decimal GetDiscountedBid(AdGroup group, AdCreative adCreative)
        {
            var campaign = group.Campaign;
            var bid = adCreative.GetReadableBid();
            return GetDiscountedBid(campaign, bid);
        }

        #endregion

        public override string ToString()
        {
            return Name;
        }

        public virtual CostModelWrapperEnum? GetValidCostModelWrapper()
        {
            var adgroups = GetGroups();

            //if no groups then all cost model are valid
            if (adgroups.Count == 0 || adgroups.All(x => x.CostModelWrapperEnum == 0))
                return null;

            // if all groups CPC then all and CPC
            if (adgroups.All(x => x.CostModelWrapperEnum == 0 || x.CostModelWrapperEnum == CostModelWrapperEnum.CPC))
                return CostModelWrapperEnum.CPC;

            // if all groups CPM then all and CPM
            if (adgroups.All(x => x.CostModelWrapperEnum == 0 || x.CostModelWrapperEnum == CostModelWrapperEnum.CPM))
                return CostModelWrapperEnum.CPM;

            // if all groups CPM then all and CPPV
            if (adgroups.All(x => x.CostModelWrapperEnum == 0 || x.CostModelWrapperEnum == CostModelWrapperEnum.CPPV))
                return CostModelWrapperEnum.CPPV;

            // if all groups CPM then all and CPV
            if (adgroups.All(x => x.CostModelWrapperEnum == 0 || x.CostModelWrapperEnum == CostModelWrapperEnum.CPV))
                return CostModelWrapperEnum.CPV;


            return 0;
        }

        public virtual void ChangeServerSetting(CampaignServerSetting campaignServerSetting)
        {
            if (this.CampaignServerSetting == null)
            {
                CampaignServerSetting = new CampaignServerSetting(this);
            }

            this.CampaignServerSetting.AdRequestCacheLifeTime = campaignServerSetting.AdRequestCacheLifeTime;
            this.CampaignServerSetting.AgencyCommission = campaignServerSetting.AgencyCommission;
            this.CampaignServerSetting.AgencyCommissionValue = campaignServerSetting.AgencyCommissionValue;
        }
        public virtual void ChangeCampaignAssignedAppsite(IList<CampaignAssignedAppsite> settings)
        {
            if (this.CampaignAssignedAppsites == null)
            {
                CampaignAssignedAppsites = new List<CampaignAssignedAppsite>();
            }
            if (settings != null)

            {
                foreach (var setting in settings)
                {
                    var ob = setting.Clone();
                    ob.Campaign = this;
                    this.CampaignAssignedAppsites.Add(ob);

                }
            }



        }
        public virtual void AddDefaultCampaignServerSetting()
        {
            if (this.CampaignServerSetting == null)
            {
                this.CampaignServerSetting = new CampaignServerSetting(this);
            }
        }
        public virtual void PublishCampPauseEventForKafka()
        {


            //var publisher = EventPublisher.Create("events", "event.pubsub",
            //   new EventProducerConfig(Configuration.AdFalconPortalProduceKafkaServerList, "event.kafka")
            //   {
            //       ProduceBatchTimeOut = TimeSpan.FromMilliseconds(Configuration.AdFalconPortalProduceBatchTimeOutKafka)
            //   });

               // if (Configuration.KafkaEnabled)
               // Configuration.KafkaEventPublisher.Publish(new PauseCampaignEvent { CampaignId = this.ID, });
        }

        public virtual void PublishCampBillingInforForKafka(EntityEventData args )
        {
            var isDirty = false;
            if (!(args.DirtyProperties != null && args.DirtyProperties.Length>0 && this.ID>0))
            {
                return;
            }
            foreach (var item in billingInfoPropTobeNotifyed)
            {
               var index= Array.IndexOf(args.PropertyNames, item);
                isDirty= args.DirtyProperties.Contains(index);
                if (isDirty)
                {
                    break;


                }

            }
            if (isDirty)
            {
                CampaignBillingInfoChanged campChanged = new CampaignBillingInfoChanged();

                var campItem = campaignRepository.Get(this.ID);

                campChanged.CampaignId = this.ID;
                campChanged.AccountId = this.Account.ID;
                var index = Array.IndexOf(args.PropertyNames, "ModifiedOn");
                campChanged.ModifiedOn = campItem.ModifiedOn;
                foreach (var item in billingInfoPropTobeNotifyed)
                {
                     index = Array.IndexOf(args.PropertyNames, item);

                    if (item == "Budget")
                    {
                        campChanged.NewBudget =(decimal) (args.State[index] ) ;
                        campChanged.OldBudget = (decimal) (args.OldState[index] );
                    }
                    else if (item == "DailyBudget")
                    {

                        campChanged.NewDailyBudget = (decimal?)(args.State[index]) ;
                        campChanged.OldDailyBudget = (decimal?)(args.OldState[index]);
                    }
                   else if (item == "Pacing")
                    {
                        if (args.State[index] != null)
                            campChanged.NewPacing =(PacingPolicies) (args.State[index]) ;
                        if(args.OldState[index]!=null)
                        campChanged.OldPacing = (PacingPolicies) (args.OldState[index]) ;

                    }
                    else if (item == "EndDate")
                    {
                        campChanged.NewEndDate = (args.State[index]) as DateTime?;
                        campChanged.OldEndDate = (args.OldState[index]) as DateTime?;


                    }
                    

                }
                var disc= this.GetActiveDiscount(true);
                if (disc!=null)
                {
                    campChanged.Discount =  disc.Value;
                    campChanged.DiscountFromDate = disc.FromDate;
                    campChanged.DiscountToDate = disc.ToDate;
                    campChanged.DiscountType = Convert.ToInt32(disc.Type);
                }
                //   var publisher = EventPublisher.Create("events", "event.pubsub",
                //new EventProducerConfig(Configuration.AdFalconPortalProduceKafkaServerList, "event.kafka")
                //{
                //    ProduceBatchTimeOut = TimeSpan.FromMilliseconds(Configuration.AdFalconPortalProduceBatchTimeOutKafka)
                //});

                if(Configuration.KafkaEnabled)
                Configuration.KafkaEventPublisher.Publish(campChanged);
            }
        }
        public virtual void CreateCampaignFolder()
        {
            string temp = string.Empty;
            var subFolder = string.Empty;
            var baseDirectory = Configuration.FtpBaseDirectory;

            //we need to create folder for it
            subFolder = Framework.Utilities.Environment.GetServerTime().ToString("yyyyMMdd");
            temp = string.Format("{0}/{1}", baseDirectory, subFolder);
            //create folder fo the current date
            Framework.Utilities.FtpHelper.CreateDirectory(temp);
            //create folder for current Campaign
            var isFolderCreated = false;
            while (!isFolderCreated)
            {
                var random = new Random();

                temp = string.Format("{0}/{1}", baseDirectory, subFolder);
                var r = random.Next(1, 100000).ToString();
                temp = string.Format("{0}/{1}", temp, r);
                if (!Framework.Utilities.FtpHelper.DirectoryExists(temp))
                {
                    Framework.Utilities.FtpHelper.CreateDirectory(temp);
                    isFolderCreated = true;
                    subFolder += "/" + r;
                    this.FolderURL = subFolder;
                }
            }
        }
    }
}

